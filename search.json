[{"path":"https://amc-heme.github.io/SCUBA/LICENSE_Seurat.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Seurat authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"User Guide","text":"SCUBA provides several functions exploration, access, visualization data single-cell objects. covered , object type supported SCUBA. SCUBA currently supports Seurat, SingleCellExperiment, anndata objects.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"naming-conventions","dir":"Articles","previous_headings":"","what":"Naming Conventions","title":"User Guide","text":"Single-cell object classes use different terms refer similar concepts. simplicity, tutorial use one term concept. concepts mentioned tutorial given , concept, terms used object class mentioned, along term used tutorial. Sequencing modalities: data structure used store type single-cell data (.e. scRNA-seq, surface protein measurements, ATAC-seq, etc.) referred “assay” Seurat, “experiment” SingleCellExperiment, “modality” anndata. tutorial use “modality”. Data structure transformed data: Seurat objects, structure used storing raw counts, normalized counts, transformations known “slot”. SingleCellExperiment, referred “assay”, anndata, “layer”. tutorial use “layer”.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"User Guide","text":"Please ensure loaded SCUBA package continuing. See instructions install SCUBA. Next, load single-cell object. Objects loaded according using conventional means object, shown . tutorial, use AML_Seurat, AML_SCE(), AML_h5ad() load example dataset included SCUBA Seurat, SingleCellExperiment, anndata format, respectively. anndata objects, recommend loading via anndata R package. anndata Python package also must installed Python environment. information, see .","code":"# Load package library(SCUBA)"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"readRDS(   # Replace with path to Seurat object   \"path/to/Seurat_object.rds\"   ) # Standard SingleCellExperiment objects readRDS(   # Replace with the path to your object   \"path/to/sce_object.rds\" )  # HDF5-storage enabled SingleCellExperiment objects saved via the HDF5Array package HDF5Array::loadHDF5SummarizedExperiment(   # Replace with the path to the directory created via   # HDF5Array::saveHDF5SummarizedExperiment   dir = \"path/to/sce_dir/\" ) anndata::read_h5ad(   \"path_to_anndata_object.h5ad\" )"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"data-access","dir":"Articles","previous_headings":"","what":"Data Access","title":"User Guide","text":"primary data access method SCUBA fetch_data(). function replicates behavior FetchData() SeuratObject package. function S3 generic executes methods based object type. Seurat object passed fetch_data(), FetchData method SeuratObject package ran. SingleCellExperiment anndata objects passed, methods SCUBA dispatched replicate behavior FetchData objects. fetch_data() can used fetch either feature expression data, metadata, reduction coordinates, fetched using parameter, vars. entry passed vars, fetch_data() automatically identify type data matching input retrieve data accordingly.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"fetching-expression-data","dir":"Articles","previous_headings":"Data Access","what":"Fetching Expression Data","title":"User Guide","text":"fetch_data() can retrieve feature expression data assay object (“experiment” SingleCellExperiment “modality” anndata objects). retrieve feature expression data, can pass number features vars parameter. Features may name across different assays/experiments/modalities. example, may data CD4 gene surface protein expression, may gene expression chromatin accessibility data gene. ensure feature data correct modality returned, fetch_data() implements syntax “key” specified feature name, underscore separating key feature name. determine key enter desired modality, provide all_keys() utility function. output named character vector, names equal name modality, values equal key use.","code":"{\"key\" of the modality} + \"_\" + {feature name}"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-1","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata example object, use “rna” key pull data “RNA” assay. pull gene expression data FLT3, example, pass “rna_FLT3” vars. example object, use “RNA” key pull data “RNA” assay. pull gene expression data FLT3, example, pass “RNA_FLT3” vars. convention, gene expression modality anndata objects named “X”. example object, use “X” key pull data “RNA” assay. pull gene expression data FLT3, example, pass “X_FLT3” vars.","code":"all_keys(AML_Seurat) ## meta.data       RNA        AB       pca      umap  ##     \"md_\"    \"rna_\"     \"ab_\"     \"PC_\"   \"UMAP_\" fetch_data(   AML_Seurat,   vars = \"rna_FLT3\"   ) |>   # First 10 rows are shown for this example   head(10) ##          rna_FLT3 ## 487013_1 0.000000 ## 39207_1  0.000000 ## 861619_1 0.000000 ## 561110_1 0.000000 ## 283967_1 0.000000 ## 422573_1 0.000000 ## 453256_1 1.620299 ## 531766_1 0.000000 ## 796968_1 0.000000 ## 624345_1 2.037607 all_keys(AML_SCE()) ##    RNA     AB    PCA   UMAP  ##  \"RNA\"   \"AB\"  \"PCA\" \"UMAP\" fetch_data(   AML_SCE(),   vars = \"RNA_FLT3\"   ) |>   # First 10 rows are shown for this example   head(10) ##          RNA_FLT3 ## 487013_1 0.000000 ## 39207_1  0.000000 ## 861619_1 0.000000 ## 561110_1 0.000000 ## 283967_1 0.000000 ## 422573_1 0.000000 ## 453256_1 1.620299 ## 531766_1 0.000000 ## 796968_1 0.000000 ## 624345_1 2.037607 all_keys(AML_h5ad()) ##         X     X_pca    X_umap   protein  ##       \"X\"   \"X_pca\"  \"X_umap\" \"protein\" fetch_data(   AML_h5ad(),   vars = \"X_FLT3\"   ) |>   # First 10 rows are shown for this example   head(10) ##            X_FLT3 ## 487013_1 0.000000 ## 39207_1  0.000000 ## 861619_1 0.000000 ## 561110_1 0.000000 ## 283967_1 0.000000 ## 422573_1 0.000000 ## 453256_1 1.620299 ## 531766_1 0.000000 ## 796968_1 0.000000 ## 624345_1 2.037607"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-2","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"number features can passed vars character vector. view available features modality, SCUBA provides features_in_assay() generic. Use assay parameter specify modality, using name instead key. utility generic can used query available features modality, check feature represented data assay passage fetch_data. Seurat SingleCellExperiment anndata","code":"available_genes <-   features_in_assay(     AML_Seurat,     # For this object, \"RNA\" is the gene expression assay     assay = \"RNA\"   )  available_genes |>    head(10) ##  [1] \"ACTG1\"   \"ADGRG1\"  \"AHSP\"    \"AIF1\"    \"ANK1\"    \"ANKRD28\" \"ANLN\"    ##  [8] \"ANP32E\"  \"ANPEP\"   \"ANXA2\" # Test if a gene is present in the RNA assay before passage to fetch_data \"MEIS1\" %in% available_genes ## [1] TRUE # Request data for multiple features fetch_data(   AML_Seurat,   vars = c(\"rna_FLT3\", \"rna_MEIS1\")   ) |>   head(10) ##          rna_FLT3 rna_MEIS1 ## 487013_1 0.000000         0 ## 39207_1  0.000000         0 ## 861619_1 0.000000         0 ## 561110_1 0.000000         0 ## 283967_1 0.000000         0 ## 422573_1 0.000000         0 ## 453256_1 1.620299         0 ## 531766_1 0.000000         0 ## 796968_1 0.000000         0 ## 624345_1 2.037607         0 available_genes <-   features_in_assay(     AML_SCE(),     # In this object, RNA is the name of the gene expression experiment     assay = \"RNA\"   )  available_genes |>    head(10) ##  [1] \"ACTG1\"   \"ADGRG1\"  \"AHSP\"    \"AIF1\"    \"ANK1\"    \"ANKRD28\" \"ANLN\"    ##  [8] \"ANP32E\"  \"ANPEP\"   \"ANXA2\" # Test if a gene is present in the RNA assay before passage to fetch_data \"MEIS1\" %in% available_genes ## [1] TRUE # Request data for multiple features fetch_data(   AML_SCE(),   vars = c(\"RNA_FLT3\", \"RNA_MEIS1\")   ) |>   head(10) ##          RNA_FLT3 RNA_MEIS1 ## 487013_1 0.000000         0 ## 39207_1  0.000000         0 ## 861619_1 0.000000         0 ## 561110_1 0.000000         0 ## 283967_1 0.000000         0 ## 422573_1 0.000000         0 ## 453256_1 1.620299         0 ## 531766_1 0.000000         0 ## 796968_1 0.000000         0 ## 624345_1 2.037607         0 available_genes <-   features_in_assay(     AML_h5ad(),     assay = \"X\"   )  available_genes |>    head(10) ##  [1] \"ACTG1\"   \"ADGRG1\"  \"AHSP\"    \"AIF1\"    \"ANK1\"    \"ANKRD28\" \"ANLN\"    ##  [8] \"ANP32E\"  \"ANPEP\"   \"ANXA2\" # Test if a gene is present in the RNA assay before passage to fetch_data \"MEIS1\" %in% available_genes ## [1] TRUE # Request data for multiple features fetch_data(   AML_h5ad(),   vars = c(\"X_FLT3\", \"X_MEIS1\")   ) |>   head(10) ##            X_FLT3 X_MEIS1 ## 487013_1 0.000000       0 ## 39207_1  0.000000       0 ## 861619_1 0.000000       0 ## 561110_1 0.000000       0 ## 283967_1 0.000000       0 ## 422573_1 0.000000       0 ## 453256_1 1.620299       0 ## 531766_1 0.000000       0 ## 796968_1 0.000000       0 ## 624345_1 2.037607       0"},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"expression-data-from-alternate-layers","dir":"Articles","previous_headings":"Data Access","what":"Expression Data from Alternate Layers","title":"User Guide","text":"default, fetch_data() pull data normalized counts layer. Seurat objects, “Data” layer SingleCellExperiment objects, “logcounts”. anndata objects, customary store normalized count data X matrix. (normalized counts data object stored elsewhere, see “anndata” tab ). pull data alternate layers, use layer parameter.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-4","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata , feature expression data pulled raw counts (counts slot). Seurat v4 earlier, layer parameter named slot. using Seurat v4 earlier, need use slot instead layer. difference affect SingleCellExperiment anndata objects: objects, layer used. , feature expression data pulled raw counts (counts layer, referred counts “assay” SingleCellExperiment). layer parameter undefined anndata objects, fetch_data() use whichever matrix present X. normalized counts data stored alternate layer layers slot, name layer must passed layers retrieve normalized counts matrix. example object , normalized counts stored X, raw counts stored alternate layer named “counts”.","code":"fetch_data(   AML_Seurat,   vars = c(\"rna_FLT3\", \"rna_MEIS1\"),   slot = \"counts\"   ) |>   head(10) ## Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. ## ℹ Please use the `layer` argument instead. ## ℹ The deprecated feature was likely used in the SCUBA package. ##   Please report the issue to the authors. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ##          rna_FLT3 rna_MEIS1 ## 487013_1        0         0 ## 39207_1         0         0 ## 861619_1        0         0 ## 561110_1        0         0 ## 283967_1        0         0 ## 422573_1        0         0 ## 453256_1        3         0 ## 531766_1        0         0 ## 796968_1        0         0 ## 624345_1        4         0 fetch_data(   AML_SCE(),   vars = c(\"RNA_FLT3\", \"RNA_MEIS1\"),   layer = \"counts\"   ) |>   head(10) ##          RNA_FLT3 RNA_MEIS1 ## 487013_1        0         0 ## 39207_1         0         0 ## 861619_1        0         0 ## 561110_1        0         0 ## 283967_1        0         0 ## 422573_1        0         0 ## 453256_1        3         0 ## 531766_1        0         0 ## 796968_1        0         0 ## 624345_1        4         0 # Raw counts in \"counts\" fetch_data(   AML_h5ad(),   vars = c(\"X_FLT3\", \"X_MEIS1\"),   layer = \"counts\"   ) |>   head(10) ##          X_FLT3 X_MEIS1 ## 487013_1      0       0 ## 39207_1       0       0 ## 861619_1      0       0 ## 561110_1      0       0 ## 283967_1      0       0 ## 422573_1      0       0 ## 453256_1      3       0 ## 531766_1      0       0 ## 796968_1      0       0 ## 624345_1      4       0 # Normalized counts in X fetch_data(   AML_h5ad(),   vars = c(\"X_FLT3\", \"X_MEIS1\")   ) |>   head(10) ##            X_FLT3 X_MEIS1 ## 487013_1 0.000000       0 ## 39207_1  0.000000       0 ## 861619_1 0.000000       0 ## 561110_1 0.000000       0 ## 283967_1 0.000000       0 ## 422573_1 0.000000       0 ## 453256_1 1.620299       0 ## 531766_1 0.000000       0 ## 796968_1 0.000000       0 ## 624345_1 2.037607       0"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"fetching-metadata","dir":"Articles","previous_headings":"Data Access","what":"Fetching Metadata","title":"User Guide","text":"retrieve metadata, pass name metadata variable fetch vars parameter fetch_data(). can pass number metadata variables vars character vector. metadata variable object can retrieved, differences input categorical numeric metadata variables. view available metadata variables object, SCUBA provides meta_varnames() utility function.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-5","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"# View available metadata meta_varnames(AML_Seurat) ##  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        ##  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         ##  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     ## [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           ## [13] \"Batch\"               \"x\"                   \"y\"                   ## [16] \"x_mean\"              \"y_mean\"              \"cor\"                 ## [19] \"ct\"                  \"prop\"                \"meandist\"            ## [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          ## [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               ## [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\" fetch_data(   AML_Seurat,   vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##                   condensed_cell_type    Batch nCount_RNA ## 487013_1                 Plasma cells BM_200AB      10863 ## 39207_1                  Plasma cells BM_200AB       8403 ## 861619_1                 Plasma cells BM_200AB       8100 ## 561110_1                 Plasma cells BM_200AB       8151 ## 283967_1                    Primitive BM_200AB       8828 ## 422573_1                 Plasma cells BM_200AB       5188 ## 453256_1              Dendritic cells BM_200AB       7399 ## 531766_1                    Primitive BM_200AB       6621 ## 796968_1                    Primitive BM_200AB       6243 ## 624345_1 Plasmacytoid dendritic cells BM_200AB       5995 # View available metadata meta_varnames(AML_SCE()) ##  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        ##  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         ##  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     ## [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           ## [13] \"Batch\"               \"x\"                   \"y\"                   ## [16] \"x_mean\"              \"y_mean\"              \"cor\"                 ## [19] \"ct\"                  \"prop\"                \"meandist\"            ## [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          ## [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               ## [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\" \"ident\" fetch_data(   AML_SCE(),   vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##                   condensed_cell_type    Batch nCount_RNA ## 487013_1                 Plasma cells BM_200AB      10863 ## 39207_1                  Plasma cells BM_200AB       8403 ## 861619_1                 Plasma cells BM_200AB       8100 ## 561110_1                 Plasma cells BM_200AB       8151 ## 283967_1                    Primitive BM_200AB       8828 ## 422573_1                 Plasma cells BM_200AB       5188 ## 453256_1              Dendritic cells BM_200AB       7399 ## 531766_1                    Primitive BM_200AB       6621 ## 796968_1                    Primitive BM_200AB       6243 ## 624345_1 Plasmacytoid dendritic cells BM_200AB       5995 # View available metadata meta_varnames(AML_h5ad()) ##  [1] \"nCount_RNA\"          \"nFeature_RNA\"        \"nCount_AB\"           ##  [4] \"nFeature_AB\"         \"nCount_BOTH\"         \"nFeature_BOTH\"       ##  [7] \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     \"Prediction_Ind\"      ## [10] \"BOTH_snn_res.1\"      \"ClusterID\"           \"Batch\"               ## [13] \"x\"                   \"y\"                   \"x_mean\"              ## [16] \"y_mean\"              \"cor\"                 \"ct\"                  ## [19] \"prop\"                \"meandist\"            \"cDC\"                 ## [22] \"B.cells\"             \"Myelocytes\"          \"Erythroid\"           ## [25] \"Megakaryocte\"        \"Ident\"               \"RNA_snn_res.0.4\"     ## [28] \"condensed_cell_type\" fetch_data(   AML_h5ad(),   vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##                   condensed_cell_type    Batch nCount_RNA ## 487013_1                 Plasma cells BM_200AB      10863 ## 39207_1                  Plasma cells BM_200AB       8403 ## 861619_1                 Plasma cells BM_200AB       8100 ## 561110_1                 Plasma cells BM_200AB       8151 ## 283967_1                    Primitive BM_200AB       8828 ## 422573_1                 Plasma cells BM_200AB       5188 ## 453256_1              Dendritic cells BM_200AB       7399 ## 531766_1                    Primitive BM_200AB       6621 ## 796968_1                    Primitive BM_200AB       6243 ## 624345_1 Plasmacytoid dendritic cells BM_200AB       5995"},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"fetch_metadata-generic","dir":"Articles","previous_headings":"Data Access > Fetching Metadata","what":"fetch_metadata Generic","title":"User Guide","text":"retrieving just metadata large single-cell objects, offer fetch_metadata() method faster using fetch_data(). fetch_data(), desired metadata variables passed vars. anndata objects, fetch_metadata() offer performance advantages fetch_data().","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-7","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"fetch_metadata(   AML_Seurat,   vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##                   condensed_cell_type    Batch nCount_RNA ## 487013_1                 Plasma cells BM_200AB      10863 ## 39207_1                  Plasma cells BM_200AB       8403 ## 861619_1                 Plasma cells BM_200AB       8100 ## 561110_1                 Plasma cells BM_200AB       8151 ## 283967_1                    Primitive BM_200AB       8828 ## 422573_1                 Plasma cells BM_200AB       5188 ## 453256_1              Dendritic cells BM_200AB       7399 ## 531766_1                    Primitive BM_200AB       6621 ## 796968_1                    Primitive BM_200AB       6243 ## 624345_1 Plasmacytoid dendritic cells BM_200AB       5995 fetch_metadata(   AML_SCE(),   vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##                   condensed_cell_type    Batch nCount_RNA ## 487013_1                 Plasma cells BM_200AB      10863 ## 39207_1                  Plasma cells BM_200AB       8403 ## 861619_1                 Plasma cells BM_200AB       8100 ## 561110_1                 Plasma cells BM_200AB       8151 ## 283967_1                    Primitive BM_200AB       8828 ## 422573_1                 Plasma cells BM_200AB       5188 ## 453256_1              Dendritic cells BM_200AB       7399 ## 531766_1                    Primitive BM_200AB       6621 ## 796968_1                    Primitive BM_200AB       6243 ## 624345_1 Plasmacytoid dendritic cells BM_200AB       5995 fetch_metadata(   AML_h5ad(),   vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##                   condensed_cell_type    Batch nCount_RNA ## 487013_1                 Plasma cells BM_200AB      10863 ## 39207_1                  Plasma cells BM_200AB       8403 ## 861619_1                 Plasma cells BM_200AB       8100 ## 561110_1                 Plasma cells BM_200AB       8151 ## 283967_1                    Primitive BM_200AB       8828 ## 422573_1                 Plasma cells BM_200AB       5188 ## 453256_1              Dendritic cells BM_200AB       7399 ## 531766_1                    Primitive BM_200AB       6621 ## 796968_1                    Primitive BM_200AB       6243 ## 624345_1 Plasmacytoid dendritic cells BM_200AB       5995"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-8","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"programming context, may useful pull full table. can done fetch_metadata() using full_table parameter.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-9","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"table <-    fetch_metadata(     AML_Seurat,     full_table = TRUE     )  table[1:10, 1:5] ##             orig.ident nCount_RNA nFeature_RNA nCount_AB nFeature_AB ## 487013_1 SeuratProject      10863          228     25709         195 ## 39207_1  SeuratProject       8403          210     31367         195 ## 861619_1 SeuratProject       8100          196     28166         195 ## 561110_1 SeuratProject       8151          179     14440         194 ## 283967_1 SeuratProject       8828          242      8203         191 ## 422573_1 SeuratProject       5188          147      8634         192 ## 453256_1 SeuratProject       7399          264     20649         194 ## 531766_1 SeuratProject       6621          232     17549         192 ## 796968_1 SeuratProject       6243          229     15178         193 ## 624345_1 SeuratProject       5995          246     22268         194 table <-   fetch_metadata(     AML_SCE(),     full_table = TRUE     )  table[1:10, 1:5] ## DataFrame with 10 rows and 5 columns ##             orig.ident nCount_RNA nFeature_RNA nCount_AB nFeature_AB ##            <character>  <numeric>    <integer> <numeric>   <integer> ## 487013_1 SeuratProject      10863          228     25709         195 ## 39207_1  SeuratProject       8403          210     31367         195 ## 861619_1 SeuratProject       8100          196     28166         195 ## 561110_1 SeuratProject       8151          179     14440         194 ## 283967_1 SeuratProject       8828          242      8203         191 ## 422573_1 SeuratProject       5188          147      8634         192 ## 453256_1 SeuratProject       7399          264     20649         194 ## 531766_1 SeuratProject       6621          232     17549         192 ## 796968_1 SeuratProject       6243          229     15178         193 ## 624345_1 SeuratProject       5995          246     22268         194 table <-   fetch_metadata(     AML_h5ad(),     full_table = TRUE     )  table[1:10, 1:5] ##          nCount_RNA nFeature_RNA nCount_AB nFeature_AB nCount_BOTH ## 487013_1      10863          228     25709         195       36572 ## 39207_1        8403          210     31367         195       39770 ## 861619_1       8100          196     28166         195       36266 ## 561110_1       8151          179     14440         194       22591 ## 283967_1       8828          242      8203         191       17031 ## 422573_1       5188          147      8634         192       13822 ## 453256_1       7399          264     20649         194       28048 ## 531766_1       6621          232     17549         192       24170 ## 796968_1       6243          229     15178         193       21421 ## 624345_1       5995          246     22268         194       28263"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"fetching-reduction-coordinates","dir":"Articles","previous_headings":"Data Access","what":"Fetching Reduction Coordinates","title":"User Guide","text":"similar manner expression data, reduction coordinates fetch passed vars using “key” underscore system. case, enter key reduction use, integer specifying dimension reduction pull . assays/modalities, run all_keys() see key corresponding reduction like pull data . Examples object type provided .","code":"{\"key\" of the reduction} + \"_\" + {dimension}"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-10","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata running all_keys(), key UMAP reduction object “UMAP_”. fetch first second dims, pass “UMAP_1” “UMAP_2” vars. running all_keys(), key UMAP reduction object “UMAP_”. fetch first second dims, pass “UMAP_1” “UMAP_2” vars. running all_keys(), key UMAP reduction object “X_umap_”. fetch first second dims, pass “X_umap_1” “X_umap_2” vars.","code":"all_keys(AML_Seurat) ## meta.data       RNA        AB       pca      umap  ##     \"md_\"    \"rna_\"     \"ab_\"     \"PC_\"   \"UMAP_\" fetch_data(   AML_Seurat,   vars = c(\"UMAP_1\", \"UMAP_2\")   ) |>   head(10) ##             UMAP_1    UMAP_2 ## 487013_1 -1.643589  9.901035 ## 39207_1  -1.504856 10.125558 ## 861619_1 -1.448029 10.210141 ## 561110_1 -1.375756 10.512531 ## 283967_1 -1.405495  3.389042 ## 422573_1 -1.391848 10.582989 ## 453256_1 -2.676966  5.075310 ## 531766_1 -3.032746  5.115050 ## 796968_1 -3.034830  5.314629 ## 624345_1 -2.692851  4.533458 all_keys(AML_SCE()) ##    RNA     AB    PCA   UMAP  ##  \"RNA\"   \"AB\"  \"PCA\" \"UMAP\" fetch_data(   AML_SCE(),   vars = c(\"UMAP_1\", \"UMAP_2\")   ) |>   head(10) ##             UMAP_1    UMAP_2 ## 487013_1 -1.643589  9.901035 ## 39207_1  -1.504856 10.125558 ## 861619_1 -1.448029 10.210141 ## 561110_1 -1.375756 10.512531 ## 283967_1 -1.405495  3.389042 ## 422573_1 -1.391848 10.582989 ## 453256_1 -2.676966  5.075310 ## 531766_1 -3.032746  5.115050 ## 796968_1 -3.034830  5.314629 ## 624345_1 -2.692851  4.533458 all_keys(AML_h5ad()) ##         X     X_pca    X_umap   protein  ##       \"X\"   \"X_pca\"  \"X_umap\" \"protein\" fetch_data(   AML_h5ad(),   vars = c(\"X_umap_1\", \"X_umap_2\")   ) |>   head(10) ##           X_umap_1  X_umap_2 ## 487013_1 -1.643589  9.901035 ## 39207_1  -1.504856 10.125558 ## 861619_1 -1.448029 10.210141 ## 561110_1 -1.375756 10.512531 ## 283967_1 -1.405495  3.389042 ## 422573_1 -1.391848 10.582989 ## 453256_1 -2.676966  5.075310 ## 531766_1 -3.032746  5.115050 ## 796968_1 -3.034830  5.314629 ## 624345_1 -2.692851  4.533458"},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"fetch_reduction-generic","dir":"Articles","previous_headings":"Data Access > Fetching Reduction Coordinates","what":"fetch_reduction Generic","title":"User Guide","text":"metadata, provide separate generic, fetch_reduction(), faster using fetch_data() retrieving just reduction coordinates large single-cell objects. Performance gains observed Seurat SingleCellExperiment objects, anndata objects (performance fetch_data() object class). syntax pulling reduction coordinates varies slightly fetch_data(). Instead entering reduction name dimensions together underscore, information supplied separate parameters. key reduction pull data passed reduction, dimensions pull coordinates passed numeric format dims. number dimensions can passed, cases, two dimensions pulled. dims specified, first second dimensions specified reduction returned.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-12","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"fetch_reduction(   AML_Seurat,   reduction = \"umap\",   dims = c(1, 2)   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##             UMAP_1    UMAP_2 ## 487013_1 -1.643589  9.901035 ## 39207_1  -1.504856 10.125558 ## 861619_1 -1.448029 10.210141 ## 561110_1 -1.375756 10.512531 ## 283967_1 -1.405495  3.389042 ## 422573_1 -1.391848 10.582989 ## 453256_1 -2.676966  5.075310 ## 531766_1 -3.032746  5.115050 ## 796968_1 -3.034830  5.314629 ## 624345_1 -2.692851  4.533458 fetch_reduction(   AML_SCE(),   reduction = \"UMAP\",   dims = c(1, 2)   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##             UMAP_1    UMAP_2 ## 487013_1 -1.643589  9.901035 ## 39207_1  -1.504856 10.125558 ## 861619_1 -1.448029 10.210141 ## 561110_1 -1.375756 10.512531 ## 283967_1 -1.405495  3.389042 ## 422573_1 -1.391848 10.582989 ## 453256_1 -2.676966  5.075310 ## 531766_1 -3.032746  5.115050 ## 796968_1 -3.034830  5.314629 ## 624345_1 -2.692851  4.533458 fetch_reduction(   AML_h5ad(),   reduction = \"X_umap\",   dims = c(1, 2)   ) |>   # head is used in this example since metadata will be returned for all cells   head(10) ##           X_umap_1  X_umap_2 ## 487013_1 -1.643589  9.901035 ## 39207_1  -1.504856 10.125558 ## 861619_1 -1.448029 10.210141 ## 561110_1 -1.375756 10.512531 ## 283967_1 -1.405495  3.389042 ## 422573_1 -1.391848 10.582989 ## 453256_1 -2.676966  5.075310 ## 531766_1 -3.032746  5.115050 ## 796968_1 -3.034830  5.314629 ## 624345_1 -2.692851  4.533458"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"fetch-data-from-a-subset-of-cells","dir":"Articles","previous_headings":"Data Access","what":"Fetch Data from a Subset of Cells","title":"User Guide","text":"circumstances, may wish access data subset cells, rather full object. fetch_data(), fetch_metadata(), fetch_reduction() provide cells parameter . cells parameter accepts character vector cell IDs return data. provide utility function, fetch_cells(), generate . fetch_cells() accepts categorical metadata variable vector values/levels filter . Cells values matching values entered returned. view available values metadata variable, can use unique_values() function.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-13","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata Identifying available values variable “Batch”: Returning cells returned “Batch” equal “PBMC_200AB”: Retrieving expression data subset: Identifying available values variable “Batch”: Returning cells returned “Batch” equal “PBMC_200AB”: Retrieving expression data subset: Identifying available values variable “Batch”: Returning cells returned “Batch” equal “PBMC_200AB”: Retrieving expression data subset:","code":"unique_values(AML_Seurat, var = \"Batch\") ## [1] \"BM_200AB\"   \"PBMC_200AB\" cell_subset <-    fetch_cells(     object = AML_Seurat,      meta_var = \"Batch\",      meta_levels = \"PBMC_200AB\"     )  # Preview cell IDs returned cell_subset[1:6] ## [1] \"844178_2\" \"809777_2\" \"613075_2\" \"401992_2\" \"15150_2\"  \"208437_2\" # Number of cells length(cell_subset) ## [1] 98 data <-   fetch_data(     AML_Seurat,     vars = \"rna_FLT3\",     cells = cell_subset     )  str(data) ## 'data.frame':    98 obs. of  1 variable: ##  $ rna_FLT3: num  0 0 0 0 0 0 0 0 0 0 ... # Compare with full data full_data <-   fetch_data(     AML_Seurat,     vars = \"rna_FLT3\"     )  str(full_data) ## 'data.frame':    250 obs. of  1 variable: ##  $ rna_FLT3: num  0 0 0 0 0 ... unique_values(AML_SCE(), var = \"Batch\") ## [1] \"BM_200AB\"   \"PBMC_200AB\" cell_subset <-    fetch_cells(     object = AML_SCE(),      meta_var = \"Batch\",      meta_levels = \"PBMC_200AB\"     )  # Preview cell IDs returned cell_subset[1:6] ## [1] \"844178_2\" \"809777_2\" \"613075_2\" \"401992_2\" \"15150_2\"  \"208437_2\" # Number of cells length(cell_subset) ## [1] 98 data <-   fetch_data(     AML_SCE(),     vars = \"RNA_FLT3\",     cells = cell_subset     )  str(data) ## 'data.frame':    98 obs. of  1 variable: ##  $ RNA_FLT3: num  0 0 0 0 0 0 0 0 0 0 ... # Compare with full data full_data <-   fetch_data(     AML_SCE(),     vars = \"RNA_FLT3\"     )  str(full_data) ## 'data.frame':    250 obs. of  1 variable: ##  $ RNA_FLT3: num  0 0 0 0 0 ... unique_values(AML_h5ad(), var = \"Batch\") ## [1] BM_200AB   PBMC_200AB ## Levels: BM_200AB PBMC_200AB cell_subset <-    fetch_cells(     object = AML_h5ad(),      meta_var = \"Batch\",      meta_levels = \"PBMC_200AB\"     )  # Preview cell IDs returned cell_subset[1:6] ## [1] \"844178_2\" \"809777_2\" \"613075_2\" \"401992_2\" \"15150_2\"  \"208437_2\" # Number of cells length(cell_subset) ## [1] 98 data <-   fetch_data(     AML_h5ad(),     vars = \"X_FLT3\",     cells = cell_subset     )  str(data) ## 'data.frame':    98 obs. of  1 variable: ##  $ X_FLT3: num  0 0 0 0 0 0 0 0 0 0 ... ##  - attr(*, \"pandas.index\")=Index(['844178_2', '809777_2', '613075_2', '401992_2', '15150_2', '208437_2', ##        '368193_2', '457499_2', '29093_2', '744754_2', '800098_2', '754060_2', ##        '632183_2', '759680_2', '694449_2', '700832_2', '1257_2', '448980_2', ##        '199181_2', '833067_2', '251571_2', '736115_2', '712624_2', '707144_2', ##        '859209_2', '253883_2', '653923_2', '762295_2', '320896_2', '99676_2', ##        '800149_2', '682908_2', '780178_2', '852293_2', '615431_2', '218771_2', ##        '116904_2', '290694_2', '611301_2', '147803_2', '576873_2', '884381_2', ##        '127725_2', '502119_2', '607265_2', '680163_2', '787312_2', '60207_2', ##        '326911_2', '632894_2', '683104_2', '765082_2', '628813_2', '668067_2', ##        '242368_2', '157340_2', '351199_2', '409871_2', '511910_2', '488361_2', ##        '467352_2', '376467_2', '749121_2', '50361_2', '155312_2', '785055_2', ##        '246318_2', '665215_2', '634705_2', '610060_2', '89949_2', '874939_2', ##        '624530_2', '721485_2', '48168_2', '257195_2', '391063_2', '655228_2', ##        '752608_2', '687706_2', '382710_2', '700441_2', '38920_2', '564255_2', ##        '125842_2', '63869_2', '677793_2', '355446_2', '883406_2', '662718_2', ##        '691696_2', '431743_2', '158371_2', '679107_2', '844492_2', '729807_2', ##        '545562_2', '849364_2'], ##       dtype='object') # Compare with full data full_data <-   fetch_data(     AML_h5ad(),     vars = \"X_FLT3\"     )  str(full_data) ## 'data.frame':    250 obs. of  1 variable: ##  $ X_FLT3: num  0 0 0 0 0 ... ##  - attr(*, \"pandas.index\")=Index(['487013_1', '39207_1', '861619_1', '561110_1', '283967_1', '422573_1', ##        '453256_1', '531766_1', '796968_1', '624345_1', ##        ... ##        '883406_2', '662718_2', '691696_2', '431743_2', '158371_2', '679107_2', ##        '844492_2', '729807_2', '545562_2', '849364_2'], ##       dtype='object', length=250)"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-14","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"fetch_cells() currently returns subset based values/levels single categorical variable. ability create complex filters added future.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"data-exploration","dir":"Articles","previous_headings":"","what":"Data Exploration","title":"User Guide","text":"SCUBA provides several utility functions facilitate exploration objects analysis.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"view-overall-metadata-present","dir":"Articles","previous_headings":"Data Exploration","what":"View Overall Metadata Present","title":"User Guide","text":"often useful view names metadata variables object, either first pass exploring object, recall name metadata variable passage fetch_data() fetch_metadata(). done via meta_varnames().","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-15","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"meta_varnames(   AML_Seurat ) ##  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        ##  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         ##  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     ## [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           ## [13] \"Batch\"               \"x\"                   \"y\"                   ## [16] \"x_mean\"              \"y_mean\"              \"cor\"                 ## [19] \"ct\"                  \"prop\"                \"meandist\"            ## [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          ## [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               ## [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\" meta_varnames(   AML_SCE() ) ##  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        ##  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         ##  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     ## [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           ## [13] \"Batch\"               \"x\"                   \"y\"                   ## [16] \"x_mean\"              \"y_mean\"              \"cor\"                 ## [19] \"ct\"                  \"prop\"                \"meandist\"            ## [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          ## [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               ## [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\" \"ident\" meta_varnames(   AML_h5ad() ) ##  [1] \"nCount_RNA\"          \"nFeature_RNA\"        \"nCount_AB\"           ##  [4] \"nFeature_AB\"         \"nCount_BOTH\"         \"nFeature_BOTH\"       ##  [7] \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     \"Prediction_Ind\"      ## [10] \"BOTH_snn_res.1\"      \"ClusterID\"           \"Batch\"               ## [13] \"x\"                   \"y\"                   \"x_mean\"              ## [16] \"y_mean\"              \"cor\"                 \"ct\"                  ## [19] \"prop\"                \"meandist\"            \"cDC\"                 ## [22] \"B.cells\"             \"Myelocytes\"          \"Erythroid\"           ## [25] \"Megakaryocte\"        \"Ident\"               \"RNA_snn_res.0.4\"     ## [28] \"condensed_cell_type\""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"summarize-a-metadata-variable","dir":"Articles","previous_headings":"Data Exploration","what":"Summarize a Metadata Variable","title":"User Guide","text":"explore metadata variable greater detail, use unique_values(). print values within metadata variable. done “condensed_cell_type” variable identified meta_varnames(). view unique values variable, pass name variable var parameter unique_values() function.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-16","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"unique_values(   AML_Seurat,   var = \"condensed_cell_type\" ) ##  [1] \"Plasma cells\"                 \"Primitive\"                    ##  [3] \"Dendritic cells\"              \"Plasmacytoid dendritic cells\" ##  [5] \"BM Monocytes\"                 \"NK Cells\"                     ##  [7] \"CD8+ T Cells\"                 \"B Cells\"                      ##  [9] \"CD4+ T Cells\"                 \"PBMC Monocytes\" unique_values(   AML_SCE(),   var = \"condensed_cell_type\" ) ##  [1] \"Plasma cells\"                 \"Primitive\"                    ##  [3] \"Dendritic cells\"              \"Plasmacytoid dendritic cells\" ##  [5] \"BM Monocytes\"                 \"NK Cells\"                     ##  [7] \"CD8+ T Cells\"                 \"B Cells\"                      ##  [9] \"CD4+ T Cells\"                 \"PBMC Monocytes\" unique_values(   AML_h5ad(),   var = \"condensed_cell_type\" ) ##  [1] Plasma cells                 Primitive                    ##  [3] Dendritic cells              Plasmacytoid dendritic cells ##  [5] BM Monocytes                 NK Cells                     ##  [7] CD8+ T Cells                 B Cells                      ##  [9] CD4+ T Cells                 PBMC Monocytes               ## 10 Levels: B Cells BM Monocytes CD4+ T Cells CD8+ T Cells ... Primitive"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"data-visualization","dir":"Articles","previous_headings":"","what":"Data Visualization","title":"User Guide","text":"data access functions mentioned previous section can applied downstream create new plotting functions single-cell data. Functions created SCUBA generics flexible across object classes default. general workflow single-cell data visualization functions follows: Data access applicable, statistics (average expression, percent expression, number cells group, etc.) Visualization code section demonstrate use SCUBA functions simplify data access. example , function created plot density plots feature. function accept feature metadata variable fetch data entered feature variable via SCUBA access functions. Plotting code downstream create density plots. example follow principles incremental development. code block show “snapshot” development process, progressively complex output created. intermediates ugly /difficult interpret, corrected subsequent steps. First , define parameters use function. facilitate development, parameters initialized top script variables. function initially written script uses variables, code beneath variable declarations moved function end process. variables initialized include object use, feature enter plot, metadata variable. set test object provided SCUBA package, feature metadata variable present object. matter value used long exists. developing functions, values reflect test case function developing. fetching data, make basic density plot using geom_density() ggplot2 package. stage, full object split metadata variable. Make sure loaded ggplot2 proceeding. use .data[[]] aes() specification allows us supply feature character vector ggplot. Using .data[[]] allows script accept feature without needing make changes code, rename column corresponding feature output fetch_data().  Next, add fill attribute based metadata variable entered. metadata variable supplied fill attribute, using .data[[]].  plot interperetable, curves need “split” separate plots. done facet_wrap().  Next, plot visuals improved. theme_cowplot() cowplot package applied. removes grids plot region, adds axes left bottom plot. following additional changes added custom theme: Labels facet horizontally centered. legend removed plot. gray box behind facet labels made transparent using strip.background = element_rect(fill = \"#FFFFFF00\"). last two digits fill color “#FFFFFF00” make background transparent setting alpha value hex code color zero. text made bold shrank via strip.text.  point, plot finished form ready packaged function. stage, simply transfer variables defined beginning function parameters, move subsequent code function. Now call function supported object class. plots almost identical visuals, except differences assay names entering features.","code":"object <- AML_Seurat feature <- \"rna_GAPDH\" metadata <- \"condensed_cell_type\" object <- AML_Seurat feature <- \"rna_GAPDH\" metadata <- \"condensed_cell_type\"  data <-    fetch_data(     object,     # variables to fetch, the feature and metadata variable     vars =        c(feature,         metadata         )     ) if (!require(\"ggplot2\", quietly = TRUE)){   install.packages(\"ggplot2\") }  library(ggplot2) object <- AML_Seurat feature <- \"rna_GAPDH\" metadata <- \"condensed_cell_type\"  data <-    fetch_data(     object,     # variables to fetch, the feature and metadata variable     vars =        c(feature,         metadata         )     )  plot <- ggplot(     data = data,     aes(x = .data[[feature]])     ) +     geom_density()  plot object <- AML_Seurat feature <- \"rna_GAPDH\" metadata <- \"condensed_cell_type\"  data <-    fetch_data(     object,     # variables to fetch, the feature and metadata variable     vars =        c(feature,         metadata         )     )  plot <- ggplot(     data = data,     aes(x = .data[[feature]], fill = .data[[metadata]])     ) +     geom_density()  plot object <- AML_Seurat feature <- \"rna_GAPDH\" metadata <- \"condensed_cell_type\"  data <-    fetch_data(     object,     # variables to fetch, the feature and metadata variable     vars =        c(feature,         metadata         )     )  plot <- ggplot(     data = data,     aes(x = .data[[feature]], fill = .data[[metadata]])     ) +     geom_density() +     ggplot2::facet_wrap(         vars(.data[[metadata]]),         # Set a two-column layout         ncol = 2     )  plot if (!require(\"cowplot\", quietly = TRUE)){   install.packages(\"cowplot\") }  library(cowplot) object <- AML_Seurat feature <- \"rna_GAPDH\" metadata <- \"condensed_cell_type\"  data <-    fetch_data(     object,     # variables to fetch, the feature and metadata variable     vars =        c(feature,         metadata         )     )  plot <- ggplot(     data = data,     aes(x = .data[[feature]], fill = .data[[metadata]])     ) +     geom_density() +     ggplot2::facet_wrap(       vars(.data[[metadata]]),       ncol = 2       ) +     cowplot::theme_cowplot() +     theme(       plot.title = element_text(hjust = 0.5),       legend.position = \"none\",       strip.background = element_rect(fill = \"#FFFFFF00\"),       strip.text = element_text(face = \"bold\", size = rel(0.8))       )  plot # Transfer variables to parameters # object <- AML_Seurat # feature <- \"rna_GAPDH\" # metadata <- \"condensed_cell_type\"  density_plot <-   function(     object,     feature,     metadata     ){     data <-        fetch_data(         object,         # variables to fetch, the feature and metadata variable         vars =            c(feature,             metadata             )         )          plot <- ggplot(         data = data,         aes(x = .data[[feature]], fill = .data[[metadata]])         ) +         geom_density() +         ggplot2::facet_wrap(           vars(.data[[metadata]]),           ncol = 2           ) +         cowplot::theme_cowplot() +         theme(           plot.title = element_text(hjust = 0.5),           legend.position = \"none\",           strip.background = element_rect(fill = \"#FFFFFF00\"),           strip.text = element_text(face = \"bold\", size = rel(0.8))           )          plot     }"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-17","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata","code":"density_plot(   object = AML_Seurat,   feature = \"rna_GAPDH\",   metadata = \"condensed_cell_type\"   ) density_plot(   object = AML_SCE(),   feature = \"RNA_GAPDH\",   metadata = \"condensed_cell_type\"   ) density_plot(   object = AML_h5ad(),   feature = \"X_GAPDH\",   metadata = \"condensed_cell_type\"   )"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-18","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"process described can applied creation single-cell visualization uses expression data, metadata, reduction coordinates. SCUBA facilitates data access visualization functions, allowing users access data call access function instead object-specific data wrangling.","code":""},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"utility-methods-for-visualization-functions","dir":"Articles","previous_headings":"Data Visualization","what":"Utility Methods for Visualization Functions","title":"User Guide","text":"SCUBA provides several utility methods plotting functions define default properties, allowing users optionally specify reductions layers user plotting without requiring users enter parameters. example feature plot function uses following utility functions: default_reduction(): Returns key default reduction use. default_layer(): Returns conventional name normalized layer object. get_all_cells(): Returns IDs cells object. reduction_dimnames(): Forms names reduction dimensions pull, passage vars fetch_data.","code":"feature_plot <-    function(     object,     feature,     dims = c(1, 2),     reduction = NULL,     layer = NULL,     cells = NULL   ){   # Determine a default reduction if the user does not enter one   if (is.null(reduction)){     reduction <- default_reduction(object)     }       # Define a default layer if undefined   if (is.null(layer)){     layer <- default_layer(object)     }      # Cells: if undefined, set to all cells in object   if (is.null(cells)){     cells <- get_all_cells(object)     }      # Form syntax for pulling reduction coordinates using the reduction    # name and the dimensions entered in the function   reduction_vars <-     reduction_dimnames(       object = object,       reduction = reduction,       dims = dims       )      data <-     fetch_data(       object = object,       vars = c(reduction_vars, feature),       layer = layer,       cells = cells       )      plot <-     ggplot(       data,        aes(         x = .data[[reduction_vars[1]]],          y = .data[[reduction_vars[2]]],         color = .data[[feature]]         )       ) +     geom_point() +     cowplot::theme_cowplot() +     scale_color_gradientn(       # Color cells using the viridis palette       colors = viridisLite::plasma(12, direction = -1)       ) +     theme(       plot.title = element_text(hjust = 0.5),       strip.background = element_rect(fill = \"#FFFFFF00\"),       strip.text = element_text(face = \"bold\", size = rel(0.8))       )      plot   }"},{"path":"https://amc-heme.github.io/SCUBA/articles/user_guide.html","id":"section-19","dir":"Articles","previous_headings":"","what":"User Guide","title":"User Guide","text":"Seurat SingleCellExperiment anndata Running function without specifying default reduction, layer: utility functions supply defaults.  Running function raw counts layer:  Running function without specifying default reduction, layer: utility functions supply defaults.  Running function using raw counts layer:  Running function without specifying default reduction, layer: utility functions supply defaults.  Running function raw counts layer:","code":"feature_plot(   object = AML_Seurat,   feature = \"rna_GAPDH\"   ) feature_plot(   object = AML_Seurat,   feature = \"rna_GAPDH\",   layer = \"counts\"   ) feature_plot(   object = AML_SCE(),   feature = \"RNA_GAPDH\"   ) feature_plot(   object = AML_SCE(),   feature = \"RNA_GAPDH\",   layer = \"counts\"   ) feature_plot(   object = AML_h5ad(),   feature = \"X_GAPDH\"   ) feature_plot(   object = AML_h5ad(),   feature = \"X_GAPDH\",   layer = \"counts\"   )"},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Showers. Author. Jairav Desai. Author. Kent Riemondy. Contributor. Krysta Engel. Contributor. Clayton Smith. Funder. Craig Jordan. Funder. Austin Gillen. Author, maintainer.","code":""},{"path":"https://amc-heme.github.io/SCUBA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Showers W, Desai J, Gillen (2025). SCUBA: Common data accession single cell object formats. R package version 1.1.1, https://amc-heme.github.io/SCUBA/.","code":"@Manual{,   title = {SCUBA: Common data accession for single cell object formats},   author = {William Showers and Jairav Desai and Austin Gillen},   year = {2025},   note = {R package version 1.1.1},   url = {https://amc-heme.github.io/SCUBA/}, }"},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Common data accession for single cell object formats","text":"SCUBA (Single Cell Unified Back end API) unified data accession interface single-cell object classes. package streamlines R data analysis Seurat, SingleCellExperiment, anndata objects providing consistent interface data access, exploration, visualization. SCUBA can used retrieve following information: Feature expression data (genes, surface proteins, signatures, single-cell modality can expressed counts matrix) Cell metadata Reduction coordinates main function SCUBA fetch_data(). workflow fetch_data() based Seurat’s SeuratObject::FetchData(). added S3 methods replicate FetchData workflow SingleCellExperiment anndata objects. fetch_data() returns data R data.frame cells rows, variables requested columns. format output data.frame consistent across three object classes, allowing development downstream visualization scripts function accepted object classes.","code":""},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"supported-single-cell-objects","dir":"","previous_headings":"Overview","what":"Supported Single-Cell Objects","title":"Common data accession for single cell object formats","text":"SCUBA currently supports following object classes: Seurat SingleCellExperiment anndata Support mudata objects added near future.","code":""},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"backwards-compatability-with-seurat-v4","dir":"","previous_headings":"Overview","what":"Backwards Compatability with Seurat v4","title":"Common data accession for single cell object formats","text":"Seurat v4 objects compatible SCUBA. fetch_data() wrapper SeuratObject::FetchData() used Seurat objects, function supports versions Seurat objects Seurat currently supports. using object created Seurat v4, slot parameter used instead layer event accessing data counts scale.data layers (accessing data data layer, parameter needed, case Seurat).","code":""},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"spatial-single-cell-modalities","dir":"","previous_headings":"Overview","what":"Spatial Single-Cell Modalities","title":"Common data accession for single cell object formats","text":"SCUBA offers partial support spatial single-cell modalities. Spatial data expressed counts matrix stored assay/experiment/modality supported SCUBA, spatial images currently supported. add support spatial omics modalities future release.","code":""},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Common data accession for single cell object formats","text":"Run command install SCUBA. BiocManager used automatically install Bioconductor dependencies (SCUBA Bioconductor package). plan use SCUBA anndata objects, use dependencies = TRUE. plan use SCUBA Seurat SingleCellExperiment objects, use dependencies = FALSE.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # Set dependencies to FALSE if you do not plan to use anndata objects BiocManager::install(\"amc-heme/SCUBA\", dependencies = TRUE)"},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"additional-installation-for-anndata-objects","dir":"","previous_headings":"","what":"Additional Installation for anndata Objects","title":"Common data accession for single cell object formats","text":"use SCUBA anndata objects, need Python installation reticulate R package. using anndata objects, follow steps . using Seurat SingleCellExperiment objects, need complete steps. First, install reticulate package R. Next, need set version Python necessary packages installed. several ways . recommend use Anaconda environment, allow create environment just use SCUBA interfere installations Python may . instructions cover setting environment via anaconda, means setting Python environments work SCUBA. needed Python environment connected reticulate dependencies installed: anndata scipy numpy pandas","code":"install.packages(\"reticulate\")"},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"setting-up-a-python-environment-via-anaconda","dir":"","previous_headings":"Additional Installation for anndata Objects","what":"Setting up a Python Environment via Anaconda","title":"Common data accession for single cell object formats","text":"set Anaconda environment requisite packages SCUBA, follow steps : Download Anaconda Distribution. Use whichever installer appropriate operating system preferences. MacOS linux users: open terminal window. Windows users, can open Anaconda command prompt application (cmd.exe). Subsequent steps operating systems. termainal, create new conda environment use SCUBA. Next, “Activate” environment switch terminal. now see “(SCUBA_anndata)” left side cursor terminal. Next, install anndata package according instructions website. Make sure specify channel -c install recent version. SCUBA requires following additional packages: scipy, numpy, pandas. installed dependencies installing anndata. verify packages present, can run conda list environment: package present, see information package. present, list information returned rows. case, can install package via conda install. Connect reticulate conda environment. , run following R console: Step 7 need repeated time restart R session. using RStudio, may set default Python environment use reticulate avoid repeat step time. RStudio, complete following: Go “Tools” > “Global Options”. window appears, select “Python”. Select “Select” button next Python interpreter displayed. window appears, select “Conda Environments”. Select path Conda environment (path containing “SCUBA_Anndata” case).","code":"conda create --name SCUBA_anndata conda activate SCUBA_anndata conda install anndata -c conda-forge conda list -n SCUBA_anndata pandas conda list -n SCUBA_anndata scipy conda list -n SCUBA_anndata numpy # # Name                    Version                   Build  Channel pandas                    2.2.3           py313h668b085_3    conda-forge # Name                    Version                   Build  Channel reticulate::use_condaenv(\"SCUBA_anndata\")"},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"additional-infomration","dir":"","previous_headings":"","what":"Additional Infomration","title":"Common data accession for single cell object formats","text":"Please see website user guide information.","code":""},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Common data accession for single cell object formats","text":"Showers, W.M., Desai, J., Engel, K.L., Smith, C., Jordan, C.T. Gillen, .E. (2024) SCUBA implements storage format-agnostic API single-cell data access R. 10.12688/f1000research.154675.1.","code":""},{"path":"https://amc-heme.github.io/SCUBA/index.html","id":"problems","dir":"","previous_headings":"","what":"Problems","title":"Common data accession for single cell object formats","text":"issues arise please file Github issue repository.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_SCE.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference dataset used for testing and demonstration (SingleCellExperiment) — AML_SCE","title":"Reference dataset used for testing and demonstration (SingleCellExperiment) — AML_SCE","text":"reference dataset accute myeloid leukemia included package demonstration testing. data originally published Triana et al. 2021. SCUBA authors downsampled original Seurat object use package automated testing, converted object formats. cell types provided Triana et al. also condensed 10 generalized cell types facilitate demonstration SCUBA visualization capabilities. Details operations performed original object provided script SCUBA manuscript repository.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_SCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference dataset used for testing and demonstration (SingleCellExperiment) — AML_SCE","text":"","code":"AML_SCE()"},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_SCE.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Reference dataset used for testing and demonstration (SingleCellExperiment) — AML_SCE","text":"dataset obtained Figshare. information operations performed original object, see SCUBA manuscript repository.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_SCE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reference dataset used for testing and demonstration (SingleCellExperiment) — AML_SCE","text":"Contrary convention loading data, AML_SCE() called function, parentheses. dataset loaded HDF5Array::loadHDF5SummarizedExperiment() instead typical process loading data R packages. dataset saved using HDF5Array package test support SingleCellExperiment objects supporting HDF5 storage saved using package.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_SCE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference dataset used for testing and demonstration (SingleCellExperiment) — AML_SCE","text":"","code":"# Object summary AML_SCE() #> class: SingleCellExperiment  #> dim: 462 250  #> metadata(0): #> assays(3): counts logcounts scaledata #> rownames(462): ACTG1 ADGRG1 ... ZFAS1 ZFP36L2 #> rowData names(0): #> colnames(250): 487013_1 39207_1 ... 545562_2 849364_2 #> colData names(30): orig.ident nCount_RNA ... condensed_cell_type ident #> reducedDimNames(2): PCA UMAP #> mainExpName: RNA #> altExpNames(1): AB  # Summary of metadata variables in object meta_varnames(AML_SCE()) #>  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        #>  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         #>  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     #> [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           #> [13] \"Batch\"               \"x\"                   \"y\"                   #> [16] \"x_mean\"              \"y_mean\"              \"cor\"                 #> [19] \"ct\"                  \"prop\"                \"meandist\"            #> [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          #> [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               #> [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\" \"ident\""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_Seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference dataset used for testing and demonstration (Seurat) — AML_Seurat","title":"Reference dataset used for testing and demonstration (Seurat) — AML_Seurat","text":"reference dataset accute myeloid leukemia included package demonstration testing. data originally published Triana et al. 2021. SCUBA authors downsampled original Seurat object use package automated testing, converted object formats. cell types provided Triana et al. also condensed 10 generalized cell types facilitate demonstration SCUBA visualization capabilities. Details operations performed original object provided script SCUBA manuscript repository.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_Seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference dataset used for testing and demonstration (Seurat) — AML_Seurat","text":"","code":"AML_Seurat"},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_Seurat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reference dataset used for testing and demonstration (Seurat) — AML_Seurat","text":"object class Seurat 462 rows 250 columns.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_Seurat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Reference dataset used for testing and demonstration (Seurat) — AML_Seurat","text":"dataset obtained Figshare. information operations performed original object, see SCUBA manuscript repository.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_Seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference dataset used for testing and demonstration (Seurat) — AML_Seurat","text":"","code":"# Object summary AML_Seurat #> An object of class Seurat  #> 659 features across 250 samples within 2 assays  #> Active assay: RNA (462 features, 462 variable features) #>  3 layers present: counts, data, scale.data #>  1 other assay present: AB #>  2 dimensional reductions calculated: pca, umap  # Summary of metadata variables in object meta_varnames(AML_Seurat) #>  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        #>  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         #>  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     #> [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           #> [13] \"Batch\"               \"x\"                   \"y\"                   #> [16] \"x_mean\"              \"y_mean\"              \"cor\"                 #> [19] \"ct\"                  \"prop\"                \"meandist\"            #> [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          #> [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               #> [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference dataset used for testing and demonstration (anndata) — AML_h5ad","title":"Reference dataset used for testing and demonstration (anndata) — AML_h5ad","text":"reference dataset accute myeloid leukemia included package demonstration testing. data originally published Triana et al. 2021. SCUBA authors downsampled original Seurat object use package automated testing, converted object formats. cell types provided Triana et al. also condensed 10 generalized cell types facilitate demonstration SCUBA visualization capabilities. Details operations performed original object provided script SCUBA manuscript repository.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference dataset used for testing and demonstration (anndata) — AML_h5ad","text":"","code":"AML_h5ad()"},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_h5ad.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Reference dataset used for testing and demonstration (anndata) — AML_h5ad","text":"dataset obtained Figshare. information operations performed original object, see SCUBA manuscript repository.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_h5ad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reference dataset used for testing and demonstration (anndata) — AML_h5ad","text":"AML_h5ad() called function, parentheses. dataset Python, loaded using typical process loading data included R packages.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/AML_h5ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference dataset used for testing and demonstration (anndata) — AML_h5ad","text":"","code":"# These examples require a functional Python installation with prerequisite # packages installed to work # Please see our website for more details # https://amc-heme.github.io/SCUBA/index.html#installation #  # The examples may take a while (about 10 seconds) to run the first  # time they are executed in a session due to the time required to  # initialize a Python environment.  # R Studio does not display a spinner while these run, so the \"run_examples\" # link may not appear to do anything until the examples are finished.  AML_h5ad() #> AnnData object with n_obs × n_vars = 250 × 462 #>     obs: 'nCount_RNA', 'nFeature_RNA', 'nCount_AB', 'nFeature_AB', 'nCount_BOTH', 'nFeature_BOTH', 'BOTH_snn_res.0.9', 'seurat_clusters', 'Prediction_Ind', 'BOTH_snn_res.1', 'ClusterID', 'Batch', 'x', 'y', 'x_mean', 'y_mean', 'cor', 'ct', 'prop', 'meandist', 'cDC', 'B.cells', 'Myelocytes', 'Erythroid', 'Megakaryocte', 'Ident', 'RNA_snn_res.0.4', 'condensed_cell_type' #>     var: 'vst.mean', 'vst.variance', 'vst.variance.expected', 'vst.variance.standardized' #>     obsm: 'X_pca', 'X_umap', 'protein' #>     layers: 'counts'  # Summary of metadata variables in object meta_varnames(AML_h5ad()) #>  [1] \"nCount_RNA\"          \"nFeature_RNA\"        \"nCount_AB\"           #>  [4] \"nFeature_AB\"         \"nCount_BOTH\"         \"nFeature_BOTH\"       #>  [7] \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     \"Prediction_Ind\"      #> [10] \"BOTH_snn_res.1\"      \"ClusterID\"           \"Batch\"               #> [13] \"x\"                   \"y\"                   \"x_mean\"              #> [16] \"y_mean\"              \"cor\"                 \"ct\"                  #> [19] \"prop\"                \"meandist\"            \"cDC\"                 #> [22] \"B.cells\"             \"Myelocytes\"          \"Erythroid\"           #> [25] \"Megakaryocte\"        \"Ident\"               \"RNA_snn_res.0.4\"     #> [28] \"condensed_cell_type\""},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.AnnDataR6.html","id":null,"dir":"Reference","previous_headings":"","what":"FetchData Equivalent for Anndata Objects — FetchData.AnnDataR6","title":"FetchData Equivalent for Anndata Objects — FetchData.AnnDataR6","text":"anndata equivalent SeuratObject FetchData method.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.AnnDataR6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FetchData Equivalent for Anndata Objects — FetchData.AnnDataR6","text":"","code":"# S3 method for class 'AnnDataR6' FetchData(object, vars, layer = NULL, cells = NULL, ...)"},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.AnnDataR6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FetchData Equivalent for Anndata Objects — FetchData.AnnDataR6","text":"object anndata object. vars character vector desired features metadata variables pull object. combination entries genes matrix (X), metadata (obs), obsm matrices can provided . include feature layers, use layers parameter. greatly preferred specify matrix variable underscore. example, pull FIS1 gene genes matrix (X), specify \"X_FIS1\" instead \"FIS1\". pull metadata, use \"obs_\", pull data matrix obsm, use name matrix, obsm. example, matrix obsm named \"protein\", use \"protein_\" pull data matrix. Variables entered without key can still found, long one matrix object variable name. Variables valid key (X_, obs_, key obj.obsm_names()) ignored, duplicate variables. layer layer pull data . unspecified, feature pulled X matrix. view list available layers, run object$layers. Layers work alternate modalities stored obsm, main modality (modality X matrix object). cells character vector cells include, named object (.e. according colNames(object)). NULL, data returned cells object. ... parameter provided consistency S3 generic/methods","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.AnnDataR6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FetchData Equivalent for Anndata Objects — FetchData.AnnDataR6","text":"data.frame object containing requested expression data metadata.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.SingleCellExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"FetchData Equivalent for SingleCellExperiment Objects — FetchData.SingleCellExperiment","title":"FetchData Equivalent for SingleCellExperiment Objects — FetchData.SingleCellExperiment","text":"SingleCellExperiment equivalent SeuratObject FetchData method.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.SingleCellExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FetchData Equivalent for SingleCellExperiment Objects — FetchData.SingleCellExperiment","text":"","code":"# S3 method for class 'SingleCellExperiment' FetchData(object, vars, layer = NULL, cells = NULL, ...)"},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.SingleCellExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FetchData Equivalent for SingleCellExperiment Objects — FetchData.SingleCellExperiment","text":"object SingleCellExperiment object. vars character vector desired features metadata variables pull object. include features experiment main experiment, use name experiment prefix (.e. AB_CD4 feature experiment \"AB\" named \"CD4\".) layer assay (equivalent layer Seruat objects (slot v4 earlier)) pull data . view list available assays object, use assayNames({object}). cells character vector cells include, named object (.e. according colNames(object)). NULL, data returned cells object. ... parameter provided consistency S3 generic/methods","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/FetchData.SingleCellExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FetchData Equivalent for SingleCellExperiment Objects — FetchData.SingleCellExperiment","text":"data.frame object containing requested expression data metadata.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/SCUBA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SCUBA: Common data accession for single cell object formats — SCUBA-package","title":"SCUBA: Common data accession for single cell object formats — SCUBA-package","text":"SCUBA provides common accession framework multiple single cell object formats (Seurat, SingleCellExperiment, Anndata), facilitating analysis.","code":""},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/reference/SCUBA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SCUBA: Common data accession for single cell object formats — SCUBA-package","text":"Maintainer: Austin Gillen austin.gillen@cuanschutz.edu Authors: William Showers Jairav Desai contributors: Kent Riemondy [contributor] Krysta Engel [contributor] Clayton Smith [funder] Craig Jordan [funder]","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/all_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Get keys for all assays/reductions in an object — all_keys","title":"Get keys for all assays/reductions in an object — all_keys","text":"Returns \"keys\" reductions modalities/assays/experiments object, used fetch data via vars parameter fetch_data. fetch features object, use key representing modality feature recorded , plus underscore feature name. fetch reduction coordinates, use key reduction, plus underscore, number representing dimension retrieve coordinates.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/all_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get keys for all assays/reductions in an object — all_keys","text":"","code":"all_keys(object)  # S3 method for class 'Seurat' all_keys(object)  # S3 method for class 'SingleCellExperiment' all_keys(object)  # S3 method for class 'AnnDataR6' all_keys(object)"},{"path":"https://amc-heme.github.io/SCUBA/reference/all_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get keys for all assays/reductions in an object — all_keys","text":"object single-cell object. Currently, Seurat, SingleCellExperiment, anndata objects supported.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/all_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get keys for all assays/reductions in an object — all_keys","text":"named character vector. names vector names modalities reductions object, values corresponding keys passed fetch_data. Seurat objects, key metadata also displayed.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/all_keys.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get keys for all assays/reductions in an object — all_keys","text":"all_keys(Seurat): Seurat objects all_keys(SingleCellExperiment): SingleCellExperiment objects all_keys(AnnDataR6): SingleCellExperiment objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/all_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get keys for all assays/reductions in an object — all_keys","text":"","code":"## View keys ## # Seurat objects all_keys(AML_Seurat) #> meta.data       RNA        AB       pca      umap  #>     \"md_\"    \"rna_\"     \"ab_\"     \"PC_\"   \"UMAP_\"   # SingleCellExperiment objects  all_keys(AML_SCE()) #>    RNA     AB    PCA   UMAP  #>  \"RNA\"   \"AB\"  \"PCA\" \"UMAP\"   # anndata objects  all_keys(AML_h5ad()) #>         X     X_pca    X_umap   protein  #>       \"X\"   \"X_pca\"  \"X_umap\" \"protein\"   ## Use of keys to construct fetch_data query # Fetch a feature from the \"protein\"  # modality using its key from above fetch_data(   AML_h5ad(),    vars = \"protein_CD9-AB\"   ) |> str() #> 'data.frame':\t250 obs. of  1 variable: #>  $ protein_CD9-AB: num  1.247 0.982 2.661 0.565 0.674 ... #>  - attr(*, \"pandas.index\")=Index(['487013_1', '39207_1', '861619_1', '561110_1', '283967_1', '422573_1', #>        '453256_1', '531766_1', '796968_1', '624345_1', #>        ... #>        '883406_2', '662718_2', '691696_2', '431743_2', '158371_2', '679107_2', #>        '844492_2', '729807_2', '545562_2', '849364_2'], #>       dtype='object', length=250)  # Fetch reduction coordinates using  # the key for the UMAP reduction fetch_data(   AML_h5ad(),    vars = c(\"X_umap_1\", \"X_umap_2\")   ) |> str() #> 'data.frame':\t250 obs. of  2 variables: #>  $ X_umap_1: num  -1.64 -1.5 -1.45 -1.38 -1.41 ... #>  $ X_umap_2: num  9.9 10.13 10.21 10.51 3.39 ... #>  - attr(*, \"pandas.index\")=Index(['487013_1', '39207_1', '861619_1', '561110_1', '283967_1', '422573_1', #>        '453256_1', '531766_1', '796968_1', '624345_1', #>        ... #>        '883406_2', '662718_2', '691696_2', '431743_2', '158371_2', '679107_2', #>        '844492_2', '729807_2', '545562_2', '849364_2'], #>       dtype='object', length=250)"},{"path":"https://amc-heme.github.io/SCUBA/reference/default_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the default layer — default_layer","title":"Return the default layer — default_layer","text":"Returns default layer object passed. default layer chosen based conventions used object name normalized counts layer.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the default layer — default_layer","text":"","code":"default_layer(object)  # S3 method for class 'Seurat' default_layer(object)  # S3 method for class 'SingleCellExperiment' default_layer(object)  # S3 method for class 'AnnDataR6' default_layer(object)"},{"path":"https://amc-heme.github.io/SCUBA/reference/default_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the default layer — default_layer","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the default layer — default_layer","text":"utility function useful defining defaults plotting functions, reduce number required parameters end users need supply. see website example usage function.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_layer.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Return the default layer — default_layer","text":"default_layer(Seurat): Seurat objects Seurat objects, default layer \"data\". default_layer(SingleCellExperiment): SingleCellExperiment objects SingleCellExperiment objects, default layer \"logcounts\". default_layer(AnnDataR6): Anndata objects Anndata objects, default layer NULL, direct FetchData pull feature epxression data X matrix.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the default layer — default_layer","text":"","code":"# Seurat objects default_layer(AML_Seurat) #> [1] \"data\"  # SingleCellExperiment objects default_layer(AML_SCE()) #> [1] \"logcounts\"  # anndata objects default_layer(AML_h5ad()) #> NULL"},{"path":"https://amc-heme.github.io/SCUBA/reference/default_reduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default reduction from object — default_reduction","title":"Get default reduction from object — default_reduction","text":"Returns default reduction single-cell object passed. default_reduction check reductions order . reduction exists, returned. , function check next reduction list. none reductions list exist, function return error. UMAP t-SNE PCA","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_reduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default reduction from object — default_reduction","text":"","code":"default_reduction(object)  # S3 method for class 'Seurat' default_reduction(object)  # S3 method for class 'SingleCellExperiment' default_reduction(object)  # S3 method for class 'AnnDataR6' default_reduction(object)"},{"path":"https://amc-heme.github.io/SCUBA/reference/default_reduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default reduction from object — default_reduction","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_reduction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get default reduction from object — default_reduction","text":"utility function useful defining defaults plotting functions, reduce number required parameters end users need supply. see website example usage function.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_reduction.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get default reduction from object — default_reduction","text":"default_reduction(Seurat): Seurat objects Seurat objects, default_reduction wrapper SeuratObject::DefaultDimReduc(). default_reduction(SingleCellExperiment): SingleCellExperiment objects search order SingleCellExperiment objects . fetch_reduction search order described reduction named exactly described. UMAP TSNE PCA default_reduction(AnnDataR6): AnnDataR6 objects search order anndata objects . fetch_reduction search order described reduction named exactly described. X_umap X_tsne X_pca","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_reduction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default reduction from object — default_reduction","text":"","code":"# Seurat objects default_reduction(AML_Seurat) #> [1] \"umap\"  # SingleCellExperiment objects default_reduction(AML_SCE()) #> [1] \"UMAP\"  # anndata objects default_reduction(AML_h5ad()) #> [1] \"X_umap\""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_slot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default reduction from object — default_slot","title":"Get default reduction from object — default_slot","text":"Returns default slot object passed. function deprecated version 0.10.0. Please use default_layer() instead.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/default_slot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default reduction from object — default_slot","text":"","code":"default_slot(object)"},{"path":"https://amc-heme.github.io/SCUBA/reference/default_slot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default reduction from object — default_slot","text":"object single cell object supported SCUBA. Currently, Seurat, SingleCellExperiment, anndata objects supported.","code":""},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/reference/expr_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot feature expression by group — expr_plot","title":"Plot feature expression by group — expr_plot","text":"Common codebase violin, ridge plots.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/expr_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot feature expression by group — expr_plot","text":"","code":"expr_plot(   object,   features,   group_by,   type = \"violin\",   idents = NULL,   ncol = NULL,   sort = FALSE,   y_max = NULL,   same_y_lims = FALSE,   adjust = 1,   cols = NULL,   pt_size = 0,   split_by = NULL,   log = FALSE,   slot = NULL,   stack = FALSE,   combine = TRUE,   fill_by = NULL,   flip = FALSE,   add_noise = TRUE,   raster = NULL )"},{"path":"https://amc-heme.github.io/SCUBA/reference/expr_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot feature expression by group — expr_plot","text":"object Seurat object features Features plot (gene expression, metrics, PC scores, anything can retreived FetchData) group_by Group (color) cells different ways (example, orig.ident) type Plot type, choose 'ridge', 'violin', 'splitViolin' idents classes include plot (default ) ncol Number columns multiple plots displayed sort Sort identity classes (x-axis) average expression attribute potted, , stack True, sort identity classes features hierarchical clustering y_max Maximum y axis value same_y_lims Set y-axis limits values adjust Adjust parameter geom_violin cols Colors use plotting pt_size Point size geom_violin split_by variable split plot log plot Y axis log scale slot Slot (Seurat objects) assay (SingleCellExperiment objects) pull expression data (counts/data Seurat objects, counts/logcounts SingleCellExperiment objects) stack Horizontally stack plots multiple feature combine Combine plots single patchworked ggplot object. FALSE, return list ggplot objects fill_by Color violins/ridges based either 'feature' 'ident' flip flip plot orientation (identities x-axis) add_noise determine adding small noise plotting raster Convert points raster format, default NULL automatically rasterizes plotting 100,000 cells","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/expr_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot feature expression by group — expr_plot","text":"patchworked ggplot object combine = TRUE; otherwise, list ggplot objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/features_in_assay.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of all features in an assay/experiment/modality — features_in_assay","title":"Get names of all features in an assay/experiment/modality — features_in_assay","text":"Returns names features modality. utility function can used several applications: Shiny apps, return available features passage selection menu using fetch_data(), generate list features object searching, test feature present requesting data","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/features_in_assay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of all features in an assay/experiment/modality — features_in_assay","text":"","code":"features_in_assay(object, assay)  # S3 method for class 'Seurat' features_in_assay(object, assay)  # S3 method for class 'SingleCellExperiment' features_in_assay(object, assay)  # S3 method for class 'AnnDataR6' features_in_assay(object, assay)"},{"path":"https://amc-heme.github.io/SCUBA/reference/features_in_assay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of all features in an assay/experiment/modality — features_in_assay","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported. assay name assay/modality view features.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/features_in_assay.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get names of all features in an assay/experiment/modality — features_in_assay","text":"features_in_assay(Seurat): Seurat objects features_in_assay(SingleCellExperiment): SingleCellExperiment objects features_in_assay(AnnDataR6): Anndata objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/features_in_assay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get names of all features in an assay/experiment/modality — features_in_assay","text":"","code":"features_in_assay(AML_Seurat, assay = \"RNA\") |> str() #>  chr [1:462] \"ACTG1\" \"ADGRG1\" \"AHSP\" \"AIF1\" \"ANK1\" \"ANKRD28\" \"ANLN\" ...  # Check if a feature is present in an assay \"MEIS1\" %in% features_in_assay(AML_Seurat, assay = \"RNA\") #> [1] TRUE"},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Return cell IDs for a subset based on metadata — fetch_cells","title":"Return cell IDs for a subset based on metadata — fetch_cells","text":"Returns character vector cell names matching levels/classes specified metadata variable.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return cell IDs for a subset based on metadata — fetch_cells","text":"","code":"fetch_cells(object, meta_var, meta_levels)  # S3 method for class 'Seurat' fetch_cells(object, meta_var, meta_levels)  # S3 method for class 'SingleCellExperiment' fetch_cells(object, meta_var, meta_levels)  # S3 method for class 'AnnDataR6' fetch_cells(object, meta_var, meta_levels)"},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return cell IDs for a subset based on metadata — fetch_cells","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported. meta_var metadata variable used basis subsetting cells. meta_levels levels specified metadata variable meta_var include ","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_cells.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Return cell IDs for a subset based on metadata — fetch_cells","text":"fetch_cells(Seurat): Seurat objects fetch_cells(SingleCellExperiment): SingleCellExperiment objects fetch_cells(AnnDataR6): Anndata objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","title":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","text":"function extends behavior SeuratObject's FetchData single-cell objects, allowing expression data, metdadata, reduction coordinates pulled using consistent syntax.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","text":"","code":"fetch_data(object, vars = NULL, layer = NULL, cells = NULL, ...)  # S3 method for class 'Seurat' fetch_data(object, vars = NULL, layer = NULL, cells = NULL, slot = NULL, ...)  # S3 method for class 'SingleCellExperiment' fetch_data(object, vars, layer = NULL, cells = NULL, ...)  # S3 method for class 'AnnDataR6' fetch_data(object, vars, layer = NULL, cells = NULL, ...)"},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","text":"object single-cell object. Currently, Seurat, SingleCellExperiment, anndata objects supported. Seruat object passed generic, FetchData method SeruatObject method ran. objects, methods replicate behavior FetchData object ran. vars character vector desired features, metadata variables, reduction dimensions pull object. default, features returned default assay (\"experiment\" SingleCellExperiment objects, \"modality\" anndata objects). pull feature expression data, assay pull data defined using \"key\" assay feature name. determine key corresponds assay pull data , run all_keys. information, see user guide. layer feature expression data, layer pull data . Layers referred \"slots\" Seurat objects v4 earlier, \"assays\" SingleCellExperiment objects. cells character vector cells include, named object (.e. according colNames(object)). NULL, data returned cells object. ... Additional parameters, beyond ones listed , passed S3 methods. includes following, documented parameter entries : fetch_data.Seurat: slot parameter slot parameter added backwards compatability Seruat v4 earlier. deprecated Seurat version 5.0.0. Seruat v5.0.0 later, used. parameter also used SingleCellExperiment objects anndata objects work object classes. Use layer instead.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","text":"data.frame requested vars columns cells rows.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","text":"See GitHub.io website additional information examples.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_data.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","text":"fetch_data(Seurat): Seurat objects. run FetchData SeuratObject package. fetch_data(SingleCellExperiment): SingleCellExperiment objects fetch_data(AnnDataR6): anndata Objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch feature expression data, reduction coordinates, or metadata from single-cell objects — fetch_data","text":"","code":"# Feature expression data fetch_data(AML_Seurat, vars = \"rna_FLT3\") |> str() #> 'data.frame':\t250 obs. of  1 variable: #>  $ rna_FLT3: num  0 0 0 0 0 ...  # Reduction coordinates fetch_data(AML_Seurat, vars = c(\"UMAP_1\", \"UMAP_2\")) |> str() #> 'data.frame':\t250 obs. of  2 variables: #>  $ UMAP_1: num  -1.64 -1.5 -1.45 -1.38 -1.41 ... #>  $ UMAP_2: num  9.9 10.13 10.21 10.51 3.39 ... fetch_data(AML_Seurat, vars = c(\"PC_1\", \"PC_2\", \"PC_3\")) |> str() #> 'data.frame':\t250 obs. of  3 variables: #>  $ PC_1: num  3.91 3.67 2.97 2.88 42.94 ... #>  $ PC_2: num  1.676 -0.157 0.716 1.103 -11.258 ... #>  $ PC_3: num  1.86 3.03 2.6 3.68 -4 ...  # Metadata fetch_data(AML_Seurat, vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")) |> str() #> 'data.frame':\t250 obs. of  3 variables: #>  $ condensed_cell_type: chr  \"Plasma cells\" \"Plasma cells\" \"Plasma cells\" \"Plasma cells\" ... #>  $ Batch              : chr  \"BM_200AB\" \"BM_200AB\" \"BM_200AB\" \"BM_200AB\" ... #>  $ nCount_RNA         : num  10863 8403 8100 8151 8828 ..."},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch matrix — fetch_matrix","title":"Fetch matrix — fetch_matrix","text":"Returns object metadata specified set cells.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch matrix — fetch_matrix","text":"","code":"fetch_matrix(object, matrix_location, ...)  # S3 method for class 'AnnDataR6' fetch_matrix(object, matrix_location, ...)"},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch matrix — fetch_matrix","text":"object single-cell object (Seurat, SingleCellExperiment, Anndata). matrix_location ... Currently unused.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_matrix.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Fetch matrix — fetch_matrix","text":"fetch_matrix(AnnDataR6): AnnDataR6 objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch metadata from single-cell objects — fetch_metadata","title":"Fetch metadata from single-cell objects — fetch_metadata","text":"Returns object metadata specified set cells.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch metadata from single-cell objects — fetch_metadata","text":"","code":"fetch_metadata(   object,   vars = NULL,   cells = NULL,   full_table = FALSE,   return_class = \"dataframe\" )  # S3 method for class 'Seurat' fetch_metadata(   object,   vars = NULL,   cells = NULL,   full_table = FALSE,   return_class = \"dataframe\" )  # S3 method for class 'SingleCellExperiment' fetch_metadata(   object,   vars = NULL,   cells = NULL,   full_table = FALSE,   return_class = \"dataframe\" )  # S3 method for class 'AnnDataR6' fetch_metadata(   object,   vars = NULL,   cells = NULL,   full_table = FALSE,   return_class = \"dataframe\" )"},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch metadata from single-cell objects — fetch_metadata","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported. vars metadata variables pull object. must defined, unless \"full_table\" set TRUE. cells cell IDs pull metadata. NULL, coordinates returned cells object. Cell IDs can generated fetch_cells(). full_table TRUE, return entire metadata table. FALSE default. return_class class data returned. Set \"dataframe\" default return data.frame, may also set \"vector\" yield vector values. ignored \"full_table\" set TRUE.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch metadata from single-cell objects — fetch_metadata","text":"See GitHub.io website additional information examples.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_metadata.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Fetch metadata from single-cell objects — fetch_metadata","text":"fetch_metadata(Seurat): Seurat objects fetch_metadata(SingleCellExperiment): SingleCellExperiment objects fetch_metadata(AnnDataR6): AnnDataR6 objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch metadata from single-cell objects — fetch_metadata","text":"","code":"# Return several metadata variables as a data.frame fetch_metadata(   AML_Seurat,    vars = c(\"condensed_cell_type\", \"Batch\", \"nCount_RNA\")   ) |> str() #> 'data.frame':\t250 obs. of  3 variables: #>  $ condensed_cell_type: chr  \"Plasma cells\" \"Plasma cells\" \"Plasma cells\" \"Plasma cells\" ... #>  $ Batch              : chr  \"BM_200AB\" \"BM_200AB\" \"BM_200AB\" \"BM_200AB\" ... #>  $ nCount_RNA         : num  10863 8403 8100 8151 8828 ...    # Return data for a single metadata variable as a vector fetch_metadata(   AML_Seurat,    vars = \"condensed_cell_type\",   return_class = \"vector\"   ) |> str() #>  Named chr [1:250] \"Plasma cells\" \"Plasma cells\" \"Plasma cells\" ... #>  - attr(*, \"names\")= chr [1:250] \"487013_1\" \"39207_1\" \"861619_1\" \"561110_1\" ...  # Return all metadata  fetch_metadata(   AML_Seurat,   full_table = TRUE   ) |> str() #> 'data.frame':\t250 obs. of  29 variables: #>  $ orig.ident         : chr  \"SeuratProject\" \"SeuratProject\" \"SeuratProject\" \"SeuratProject\" ... #>  $ nCount_RNA         : num  10863 8403 8100 8151 8828 ... #>  $ nFeature_RNA       : int  228 210 196 179 242 147 264 232 229 246 ... #>  $ nCount_AB          : num  25709 31367 28166 14440 8203 ... #>  $ nFeature_AB        : int  195 195 195 194 191 192 194 192 193 194 ... #>  $ nCount_BOTH        : num  36572 39770 36266 22591 17031 ... #>  $ nFeature_BOTH      : int  423 405 391 373 433 339 458 424 422 440 ... #>  $ BOTH_snn_res.0.9   : chr  \"17\" \"17\" \"17\" \"17\" ... #>  $ seurat_clusters    : Factor w/ 15 levels \"0\",\"1\",\"2\",\"3\",..: 3 3 3 3 6 3 6 6 6 6 ... #>  $ Prediction_Ind     : chr  \"Plasma Cells\" \"Plasma Cells\" \"Plasma Cells\" \"Plasma Cells\" ... #>  $ BOTH_snn_res.1     : chr  \"12\" \"26\" \"26\" \"26\" ... #>  $ ClusterID          : chr  \"12\" \"26\" \"26\" \"26\" ... #>  $ Batch              : chr  \"BM_200AB\" \"BM_200AB\" \"BM_200AB\" \"BM_200AB\" ... #>  $ x                  : num  -9.56 -9.53 -9.56 -9.53 -4.81 ... #>  $ y                  : num  1.49 1.42 1.56 1.47 -2.44 ... #>  $ x_mean             : num  -9.56 -9.51 -9.53 -9.48 -4.74 ... #>  $ y_mean             : num  1.49 1.43 1.5 1.43 -2.49 ... #>  $ cor                : num  0.852 0.856 0.878 0.855 0.923 ... #>  $ ct                 : Factor w/ 38 levels \"Plasma cells\",..: 1 1 1 1 2 1 7 6 6 15 ... #>  $ prop               : num  1 1 1 1 1 1 1 0.8 0.8 1 ... #>  $ meandist           : num  0.045 0.0835 0.1062 0.1264 0.4902 ... #>  $ cDC                : num  NaN NaN NaN NaN NaN ... #>  $ B.cells            : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Myelocytes         : num  NaN NaN NaN NaN NaN ... #>  $ Erythroid          : num  NaN NaN NaN NaN 7.98 ... #>  $ Megakaryocte       : num  NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... #>  $ Ident              : Factor w/ 28 levels \"Plasma cells\",..: 1 1 1 1 2 1 4 4 4 4 ... #>  $ RNA_snn_res.0.4    : Factor w/ 15 levels \"0\",\"1\",\"2\",\"3\",..: 3 3 3 3 6 3 6 6 6 6 ... #>  $ condensed_cell_type: chr  \"Plasma cells\" \"Plasma cells\" \"Plasma cells\" \"Plasma cells\" ..."},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_reduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch reduction coordinates from single-cell objects — fetch_reduction","title":"Fetch reduction coordinates from single-cell objects — fetch_reduction","text":"Returns reduction coordinates matching name dimensions supplied.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_reduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch reduction coordinates from single-cell objects — fetch_reduction","text":"","code":"fetch_reduction(object, reduction, cells = NULL, dims = c(1, 2))  # S3 method for class 'Seurat' fetch_reduction(object, reduction, cells = NULL, dims = c(1, 2))  # S3 method for class 'SingleCellExperiment' fetch_reduction(object, reduction, cells = NULL, dims = c(1, 2))  # S3 method for class 'AnnDataR6' fetch_reduction(object, reduction, cells = NULL, dims = c(1, 2))"},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_reduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch reduction coordinates from single-cell objects — fetch_reduction","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported. reduction name reduction pull coordinates . cells cell IDs pull reduction data. NULL, coordinates returned cells object. Cell IDs can generated fetch_cells(). dims numeric vector indicating dimensions pull. Currently, two dimensions supported, fetch_data() supports two dimensions. instructions pulling two dimensions , see examples fetch_data().","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_reduction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch reduction coordinates from single-cell objects — fetch_reduction","text":"See GitHub.io website additional information examples.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_reduction.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Fetch reduction coordinates from single-cell objects — fetch_reduction","text":"fetch_reduction(Seurat): Seurat objects fetch_reduction(SingleCellExperiment): SingleCellExperiment objects fetch_reduction(AnnDataR6): AnnDataR6 objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/fetch_reduction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch reduction coordinates from single-cell objects — fetch_reduction","text":"","code":"# Return the first and second dimensions from the UMAP reduction fetch_reduction(   AML_Seurat,   reduction = \"umap\",   dims = c(1, 2)   ) |> str() #> 'data.frame':\t250 obs. of  2 variables: #>  $ UMAP_1: num  -1.64 -1.5 -1.45 -1.38 -1.41 ... #>  $ UMAP_2: num  9.9 10.13 10.21 10.51 3.39 ..."},{"path":"https://amc-heme.github.io/SCUBA/reference/get_all_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting utility function to return all cell IDs — get_all_cells","title":"Plotting utility function to return all cell IDs — get_all_cells","text":"Returns character vector cell names object. utility function used set defaults plotting functions created SCUBA","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/get_all_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting utility function to return all cell IDs — get_all_cells","text":"","code":"get_all_cells(object)  # S3 method for class 'Seurat' get_all_cells(object)  # S3 method for class 'SingleCellExperiment' get_all_cells(object)  # S3 method for class 'AnnDataR6' get_all_cells(object)"},{"path":"https://amc-heme.github.io/SCUBA/reference/get_all_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting utility function to return all cell IDs — get_all_cells","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/get_all_cells.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting utility function to return all cell IDs — get_all_cells","text":"additional information, see GitHub.io website (\"User Guide\" article, \"Data Visualization\" section)","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/get_all_cells.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Plotting utility function to return all cell IDs — get_all_cells","text":"get_all_cells(Seurat): Seurat objects get_all_cells(SingleCellExperiment): SingleCellExperiment objects get_all_cells(AnnDataR6): SingleCellExperiment objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/get_all_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting utility function to return all cell IDs — get_all_cells","text":"","code":"get_all_cells(AML_Seurat) |> str() #>  chr [1:250] \"487013_1\" \"39207_1\" \"861619_1\" \"561110_1\" \"283967_1\" ..."},{"path":"https://amc-heme.github.io/SCUBA/reference/meta_varnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize object metadata — meta_varnames","title":"Summarize object metadata — meta_varnames","text":"Returns names metadata variables object.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/meta_varnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize object metadata — meta_varnames","text":"","code":"meta_varnames(object)  # S3 method for class 'Seurat' meta_varnames(object)  # S3 method for class 'SingleCellExperiment' meta_varnames(object)  # S3 method for class 'AnnDataR6' meta_varnames(object)"},{"path":"https://amc-heme.github.io/SCUBA/reference/meta_varnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize object metadata — meta_varnames","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/meta_varnames.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Summarize object metadata — meta_varnames","text":"meta_varnames(Seurat): Seurat objects meta_varnames(SingleCellExperiment): SingleCellExperiment objects meta_varnames(AnnDataR6): Anndata objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/meta_varnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize object metadata — meta_varnames","text":"","code":"# Seurat objects meta_varnames(AML_Seurat) #>  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        #>  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         #>  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     #> [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           #> [13] \"Batch\"               \"x\"                   \"y\"                   #> [16] \"x_mean\"              \"y_mean\"              \"cor\"                 #> [19] \"ct\"                  \"prop\"                \"meandist\"            #> [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          #> [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               #> [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\"  # SingleCellExperiment objects meta_varnames(AML_SCE()) #>  [1] \"orig.ident\"          \"nCount_RNA\"          \"nFeature_RNA\"        #>  [4] \"nCount_AB\"           \"nFeature_AB\"         \"nCount_BOTH\"         #>  [7] \"nFeature_BOTH\"       \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     #> [10] \"Prediction_Ind\"      \"BOTH_snn_res.1\"      \"ClusterID\"           #> [13] \"Batch\"               \"x\"                   \"y\"                   #> [16] \"x_mean\"              \"y_mean\"              \"cor\"                 #> [19] \"ct\"                  \"prop\"                \"meandist\"            #> [22] \"cDC\"                 \"B.cells\"             \"Myelocytes\"          #> [25] \"Erythroid\"           \"Megakaryocte\"        \"Ident\"               #> [28] \"RNA_snn_res.0.4\"     \"condensed_cell_type\" \"ident\"                # anndata objects meta_varnames(AML_h5ad()) #>  [1] \"nCount_RNA\"          \"nFeature_RNA\"        \"nCount_AB\"           #>  [4] \"nFeature_AB\"         \"nCount_BOTH\"         \"nFeature_BOTH\"       #>  [7] \"BOTH_snn_res.0.9\"    \"seurat_clusters\"     \"Prediction_Ind\"      #> [10] \"BOTH_snn_res.1\"      \"ClusterID\"           \"Batch\"               #> [13] \"x\"                   \"y\"                   \"x_mean\"              #> [16] \"y_mean\"              \"cor\"                 \"ct\"                  #> [19] \"prop\"                \"meandist\"            \"cDC\"                 #> [22] \"B.cells\"             \"Myelocytes\"          \"Erythroid\"           #> [25] \"Megakaryocte\"        \"Ident\"               \"RNA_snn_res.0.4\"     #> [28] \"condensed_cell_type\""},{"path":"https://amc-heme.github.io/SCUBA/reference/n_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of unique values in a metadata variable — n_unique","title":"Number of unique values in a metadata variable — n_unique","text":"Returns number unique values single cell object, specified metadata variable. utility function useful directing behavior plotting functions created SCUBA. example, may plotting function changes number columns legend palette used plotting metadata variable high number values.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/n_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of unique values in a metadata variable — n_unique","text":"","code":"n_unique(object, meta_var)"},{"path":"https://amc-heme.github.io/SCUBA/reference/n_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of unique values in a metadata variable — n_unique","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported. meta_var Name metadata variable.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/n_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of unique values in a metadata variable — n_unique","text":"integer giving number unique values specified metadata variable.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/n_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of unique values in a metadata variable — n_unique","text":"","code":"n_unique(AML_Seurat, meta_var = \"ct\") #> [1] 27  metadata_variable <- \"ct\"  if (n_unique(AML_Seurat, metadata_variable) > 25){   print(\"Execute alternate plotting code when a variable has more than    25 values.\") } #> [1] \"Execute alternate plotting code when a variable has more than \\n  25 values.\""},{"path":"https://amc-heme.github.io/SCUBA/reference/object_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Object Parameter — object_param","title":"Object Parameter — object_param","text":"object parameter used nearly every instance documentation SCUBA package. parameter described avoid excessive copy/pasting documentation. support added new object classes, parameter description updated.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/object_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object Parameter — object_param","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot plot visualization — plot_dot","title":"Dot plot visualization — plot_dot","text":"Intuitive way visualizing feature expression changes across different identity classes (clusters). size dot encodes percentage cells within class, color encodes AverageExpression level across cells within class (blue high).","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot plot visualization — plot_dot","text":"","code":"plot_dot(   object,   group_by,   features,   cols = c(\"lightgrey\", \"blue\"),   col_min = -2.5,   col_max = 2.5,   dot_min = 0,   dot_scale = 6,   idents = NULL,   split_by = NULL,   cluster_idents = FALSE,   scale = TRUE,   scale_by = \"radius\",   scale_min = NA,   scale_max = NA )"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot plot visualization — plot_dot","text":"object Seurat object SingleCellExperiment object group_by name metadata variable group cells . Unlike Seurat::DotPlot(), must defined. features Input vector features, named list feature vectors feature-grouped panels desired (replicates functionality old SplitDotPlotGG) cols Colors plot. May name palette RColorBrewer::brewer.pal.info, pair colors defining gradient, 3+ colors defining multiple gradients (split_by set). col_min Minimum scaled average expression threshold (everything smaller set ) col_max Maximum scaled average expression threshold (everything larger set ) dot_min fraction cells draw smallest dot (default 0). cell groups less expressing given gene dot drawn. dot_scale Scale size points, similar cex idents Identity classes include plot (default ) split_by name metadata variable split groups . combination unique values group_by split_by variables cells exist appear y-axis plot. cluster_idents Whether order identities hierarchical clusters based given features, default FALSE scale Determine whether data scaled, TRUE default scale_by Scale size points 'size' 'radius' scale_min Set lower limit scaling, use NA default scale_max Set upper limit scaling, use NA default","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot plot visualization — plot_dot","text":"ggplot object","code":""},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dot plot visualization — plot_dot","text":"","code":"plot_dot(      AML_h5ad(),       group_by = \"condensed_cell_type\",       features = c(\"X_UNG\", \"X_GAPDH\", \"X_CCR5\")    )"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_feature.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 'features' on a dimensional reduction plot — plot_feature","title":"Visualize 'features' on a dimensional reduction plot — plot_feature","text":"Colors single cells dimensional reduction plot according 'feature' (.e. gene expression, PC scores, number genes detected, etc.)","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 'features' on a dimensional reduction plot — plot_feature","text":"","code":"plot_feature(   object,   features,   label_by = NULL,   dims = c(1, 2),   cells = NULL,   cols = if (blend) {      c(\"lightgrey\", \"#ff0000\", \"#00ff00\")  } else {          c(\"lightgrey\", \"blue\")  },   pt_size = NULL,   order = FALSE,   min_cutoff = NA,   max_cutoff = NA,   reduction = NULL,   split_by = NULL,   keep_scale = \"feature\",   shape_by = NULL,   slot = NULL,   blend = FALSE,   blend_threshold = 0.5,   label = FALSE,   label_size = 4,   label_color = \"black\",   repel = FALSE,   ncol = NULL,   coord_fixed = FALSE,   by_col = TRUE,   combine = TRUE,   raster = NULL,   raster_dpi = c(512, 512) )"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 'features' on a dimensional reduction plot — plot_feature","text":"object Seurat object SingleCellExperiment object features Vector features plot. Features can come : - Assay feature (e.g. gene name - \"MS4A1\") - column name meta.data (e.g. mitochondrial percentage - \"percent.mito\") - column name DimReduc object corresponding cell embedding values (e.g. PC 1 scores - \"PC_1\") label_by metadata column used labeling groups featute plot, label TRUE. dims Dimensions plot, must two-length numeric vector specifying x- y-dimensions .e. c(1,2) plot first second dimensions reduction results. cells Vector cells plot (default cells) cols two colors form gradient . Provide string vector first color corresponding low values, second high. Also accepts Brewer color scale vector colors. Note: bin data number colors provided. blend TRUE, takes anywhere 1-3 colors: 1 color: Treated color double-negatives, use default colors 2 3 per-feature expression 2 colors: Treated colors per-feature expression, use default color 1 double-negatives 3+ colors: First color used double-negatives, colors 2 3 used per-feature expression, others ignored pt_size Adjust point size plotting order Boolean determining whether plot cells order expression. Can useful cells expressing given feature getting buried. min_cutoff, max_cutoff Vector minimum maximum cutoff values feature, may specify quantile form 'q##' '##' quantile (eg, 'q1', 'q10') reduction dimensionality reduction use. specified, first searches umap, tsne, pca split_by metadata column split feature plot . Unlike Seurat::FeaturePlot, \"ident\" may passed since ident functionality supported SingleCellExperiment objects. metadata column name must passed, NULL disable split plots. keep_scale handle color scale across multiple plots. Options : feature (default; row/feature scaling): plots individual feature scaled maximum expression feature across conditions provided 'split_by'. (universal scaling): plots features conditions scaled maximum expression value feature highest overall expression. NULL (scaling): individual plot scaled maximum expression value feature condition provided 'split_by'. aware setting NULL result color scales comparable plots. shape_by NULL, points circles (default). can specify cell attribute (can pulled FetchData) allowing different colors different shapes cells.  applicable raster = FALSE. slot slot pull expression data ? NULL, defaults \"data\" Seurat objects, \"logcounts\" SingleCellExperiment objects. blend Scale blend expression values visualize co-expression two features blend_threshold color cutoff weak signal strong signal; ranges 0 1. label Whether label clusters label_size Sets size labels label_color Sets color label text repel Repel labels ncol Number columns combine multiple feature plots , ignored split_by NULL coord_fixed Plot cartesian coordinates fixed aspect ratio by_col splitting factor, plot splits per column features rows; ignored blend = TRUE combine Combine plots single patchworked ggplot object. FALSE, return list ggplot objects raster Convert points raster format, default NULL automatically rasterizes plotting 100,000 cells raster_dpi Pixel resolution rasterized plots, passed geom_scattermore(). Default c(512, 512).","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 'features' on a dimensional reduction plot — plot_feature","text":"patchworked ggplot object combine = TRUE; otherwise, list ggplot objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_feature.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Visualize 'features' on a dimensional reduction plot — plot_feature","text":"old .hover .identify functionality, please see HoverLocator CellSelector, respectively.","code":""},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize 'features' on a dimensional reduction plot — plot_feature","text":"","code":"plot_feature(AML_Seurat, features = \"PC_1\")"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_reduction.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensional reduction plot — plot_reduction","title":"Dimensional reduction plot — plot_reduction","text":"Graphs output dimensional reduction technique 2D scatter plot point cell positioned based cell embeddings determined reduction technique. function accepts Seurat SingleCellExperiment objects. Seurat objects, cells colored identity class default, SingleCellExperiment objects, cells colored first metadata column colData(). metadata variable used coloring cells can changed group_by parameter).","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_reduction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensional reduction plot — plot_reduction","text":"","code":"plot_reduction(   object,   dims = c(1, 2),   cells = NULL,   cols = NULL,   pt_size = NULL,   reduction = NULL,   group_by = NULL,   split_by = NULL,   shape_by = NULL,   order = NULL,   shuffle = FALSE,   seed = 1,   label = FALSE,   label_size = 4,   label_color = \"black\",   label_box = FALSE,   repel = FALSE,   cells_highlight = NULL,   cols_highlight = \"#DE2D26\",   sizes_highlight = 1,   na_value = \"grey50\",   ncol = NULL,   combine = TRUE,   raster = NULL,   raster_dpi = c(512, 512) )"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_reduction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensional reduction plot — plot_reduction","text":"object Seurat object SingleCellExperiment object dims Dimensions plot, must two-length numeric vector specifying x- y-dimensions .e. c(1,2) plot first second dimensions reduction results. cells Vector cells plot (default cells) cols Vector colors, color corresponds identity class. may also single character numeric value corresponding palette specified brewer.pal.info. default, ggplot2 assigns colors. also include number palettes pals package. See DiscretePalette details. pt_size Adjust point size plotting reduction dimensionality reduction use. specified, first searches umap, tsne, pca group_by Name one metadata columns group (color) cells (example, orig.ident). Unlike Seurat::DimPlot, \"ident\" may passed since ident functionality supported SingleCellExperiment objects. metadata column name must passed. split_by Name metadata column split plot . Unlike Seurat::DimPlot, \"ident\" may passed since ident functionality supported SingleCellExperiment objects. metadata column name must passed, NULL disable split plots. shape_by NULL, points circles (default). can specify cell attribute (can pulled FetchData) allowing different colors different shapes cells.  applicable raster = FALSE. order Specify order plotting idents. can useful crowded plots points interest buried. Provide either full list valid idents subset plotted last (top) shuffle Whether randomly shuffle order points. can useful crowded plots points interest buried. (default FALSE) seed Sets seed randomly shuffling order points. label Whether label clusters label_size Sets size labels label_color Sets color label text label_box Whether put box around label text (geom_text vs geom_label) repel Repel labels cells_highlight list character numeric vectors cells highlight. one group cells desired, can simply pass vector instead list. set, colors selected cells color(s) cols_highlight cells black (white dark.theme = TRUE); also resize size(s) passed sizes_highlight cols_highlight vector colors highlight cells ; repeat length groups cells_highlight sizes_highlight Size highlighted cells; repeat length groups cells_highlight na_value Color value NA points using custom scale ncol Number columns display combining plots combine Combine plots single patchworked ggplot object. FALSE, return list ggplot objects raster Convert points raster format, default NULL automatically rasterizes plotting 100,000 cells raster_dpi Pixel resolution rasterized plots, passed geom_scattermore(). Default c(512, 512).","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_reduction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensional reduction plot — plot_reduction","text":"patchworked ggplot object combine = TRUE; otherwise, list ggplot objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_reduction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dimensional reduction plot — plot_reduction","text":"code function Seurat Package adapted use SingleCellExperiment objects.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_ridge.html","id":null,"dir":"Reference","previous_headings":"","what":"Single cell ridge plot — plot_ridge","title":"Single cell ridge plot — plot_ridge","text":"Draws ridge plot single cell data (gene expression, metrics, PC scores, etc.)","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_ridge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single cell ridge plot — plot_ridge","text":"","code":"plot_ridge(   object,   features,   group_by,   cols = NULL,   idents = NULL,   sort = FALSE,   assay = NULL,   y_max = NULL,   same_y_lims = FALSE,   log = FALSE,   ncol = NULL,   slot = NULL,   stack = FALSE,   combine = TRUE,   fill_by = \"feature\" )"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_ridge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single cell ridge plot — plot_ridge","text":"object Seurat SingleCellExperiment object features Features plot (gene expression, metrics, PC scores, anything can retreived FetchData). group_by Group (color) cells different ways. Unlike Seurat::RidgePlot() Seurat::VlnPlot(), must defined (SingleCellExperiment objects Idents() functionality). cols Colors use plotting idents levels group variable include plot (default ) sort Sort group levels (x-axis) average expression attribute potted, can also pass 'increasing' 'decreasing' change sort direction assay Name assay use, defaults active assay y_max Maximum y axis value same_y_lims Set y-axis limits values log plot feature axis log scale ncol Number columns multiple plots displayed slot Slot (Seurat objects) assay (SingleCellExperiment objects) pull expression data (counts/data Seurat objects, counts/logcounts SingleCellExperiment objects) stack Horizontally stack plots feature combine Combine plots single patchworked ggplot object. FALSE, return list ggplot fill_by Color violins/ridges based either 'feature' 'ident'","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_ridge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single cell ridge plot — plot_ridge","text":"patchworked ggplot object combine = TRUE; otherwise, list ggplot objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_ridge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single cell ridge plot — plot_ridge","text":"","code":"plot_ridge(AML_Seurat, features = \"PC_1\", group_by = \"condensed_cell_type\") #> Warning: `PackageCheck()` was deprecated in SeuratObject 5.0.0. #> ℹ Please use `rlang::check_installed()` instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> Picking joint bandwidth of 0.854"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of single cell data — plot_scatter","title":"Scatter plot of single cell data — plot_scatter","text":"Creates scatter plot two features (typically feature expression), across set single cells. Cells colored identity class. Pearson correlation two features displayed plot.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of single cell data — plot_scatter","text":"","code":"plot_scatter(   object,   feature_1,   feature_2,   group_by,   cells = NULL,   shuffle = FALSE,   seed = 1,   cols = NULL,   pt_size = 1,   shape_by = NULL,   span = NULL,   smooth = FALSE,   combine = TRUE,   slot = NULL,   plot_cor = TRUE,   raster = NULL,   raster_dpi = c(512, 512),   jitter = FALSE )"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of single cell data — plot_scatter","text":"object Seurat object SingleCellExperiment object feature_1 First feature plot. Typically feature expression can also QC metrics, PC scores, etc. - anything can retrieved FetchData feature_2 Second feature plot. group_by Name one metadata variables group (color) cells . Unlike Seurat::FeatureScatter, least one group_by variable must defined cells Cells include scatter plot. shuffle Whether randomly shuffle order points. can useful crowded plots points interest buried. (default FALSE) seed Sets seed randomly shuffling order points. cols Colors use identity class plotting. pt_size Size points plot shape_by Ignored now span Spline span loess function call, NULL, spline added smooth Smooth graph (similar smoothScatter) combine Combine plots single patchworked slot Slot pull data , one 'counts', 'data', 'scale.data' plot_cor Display correlation plot title raster Convert points raster format, default NULL automatically use raster number points plotted greater 100,000 raster_dpi Pixel resolution rasterized plots, passed geom_scattermore(). Default c(512, 512). jitter Jitter easier visualization crowded points (default FALSE)","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of single cell data — plot_scatter","text":"ggplot object","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_violin.html","id":null,"dir":"Reference","previous_headings":"","what":"Single cell violin plot — plot_violin","title":"Single cell violin plot — plot_violin","text":"Draws violin plot single cell data (gene expression, metrics, PC scores, etc.)","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_violin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single cell violin plot — plot_violin","text":"","code":"plot_violin(   object,   features,   group_by,   cols = NULL,   pt_size = NULL,   idents = NULL,   sort = FALSE,   assay = NULL,   split_by = NULL,   adjust = 1,   y_max = NULL,   same_y_lims = FALSE,   log = FALSE,   ncol = NULL,   slot = NULL,   split_plot = FALSE,   stack = FALSE,   combine = TRUE,   fill_by = \"feature\",   flip = FALSE,   add_noise = TRUE,   raster = NULL )"},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_violin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single cell violin plot — plot_violin","text":"object Seurat SingleCellExperiment object features Features plot (gene expression, metrics, PC scores, anything can retreived FetchData). group_by Group (color) cells different ways. Unlike Seurat::RidgePlot() Seurat::VlnPlot(), must defined (SingleCellExperiment objects Idents() functionality). cols Colors use plotting pt_size Point size geom_violin idents levels group variable include plot (default ) sort Sort group levels (x-axis) average expression attribute potted, can also pass 'increasing' 'decreasing' change sort direction assay Name assay use, defaults active assay split_by variable split violin plots , adjust Adjust parameter geom_violin y_max Maximum y axis value same_y_lims Set y-axis limits values log plot feature axis log scale ncol Number columns multiple plots displayed slot Slot (Seurat objects) assay (SingleCellExperiment objects) pull expression data (counts/data Seurat objects, counts/logcounts SingleCellExperiment objects) split_plot plot group split violin plots multiple single violin shapes. stack Horizontally stack plots feature combine Combine plots single patchworked ggplot object. FALSE, return list ggplot fill_by Color violins/ridges based either 'feature' 'ident' flip flip plot orientation (identities x-axis) add_noise determine adding small noise plotting raster Convert points raster format. Requires 'ggrastr' installed.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_violin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single cell violin plot — plot_violin","text":"patchworked ggplot object combine = TRUE; otherwise, list ggplot objects","code":""},{"path":[]},{"path":"https://amc-heme.github.io/SCUBA/reference/plot_violin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single cell violin plot — plot_violin","text":"","code":"plot_violin(AML_Seurat, features = \"PC_1\", group_by = \"condensed_cell_type\")"},{"path":"https://amc-heme.github.io/SCUBA/reference/reduction_dimnames.html","id":null,"dir":"Reference","previous_headings":"","what":"From names of reduction keys for fetch_data — reduction_dimnames","title":"From names of reduction keys for fetch_data — reduction_dimnames","text":"Given name reduction set dimensions, function return names dimension appears reduction matrix. output function can passed vars parameter fetch_data() facilitate specification reduction coordinates return function.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/reduction_dimnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From names of reduction keys for fetch_data — reduction_dimnames","text":"","code":"reduction_dimnames(object, reduction, dims)  # S3 method for class 'Seurat' reduction_dimnames(object, reduction, dims)  # S3 method for class 'SingleCellExperiment' reduction_dimnames(object, reduction, dims)  # S3 method for class 'AnnDataR6' reduction_dimnames(object, reduction, dims)"},{"path":"https://amc-heme.github.io/SCUBA/reference/reduction_dimnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From names of reduction keys for fetch_data — reduction_dimnames","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported. reduction name reduction. dims numeric vector dimensions names returned.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/reduction_dimnames.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"From names of reduction keys for fetch_data — reduction_dimnames","text":"reduction_dimnames(Seurat): Seurat objects reduction_dimnames(SingleCellExperiment): SingleCellExperiment objects reduction_dimnames(AnnDataR6): AnnDataR6 objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/reduction_dimnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"From names of reduction keys for fetch_data — reduction_dimnames","text":"","code":"# From names for first and second UMAP dimensions and  # pass to fetch_data dimnames <- reduction_dimnames(   AML_Seurat,   reduction = \"umap\",   dims = c(1, 2)   )    dimnames #> [1] \"UMAP_1\" \"UMAP_2\"  fetch_data(   AML_Seurat,   vars = dimnames   ) |> str() #> 'data.frame':\t250 obs. of  2 variables: #>  $ UMAP_1: num  -1.64 -1.5 -1.45 -1.38 -1.41 ... #>  $ UMAP_2: num  9.9 10.13 10.21 10.51 3.39 ...       # Form names for first five PCA dimensions and  # pass to fetch_data dimnames <- reduction_dimnames(   AML_Seurat,   reduction = \"pca\",   dims = c(1:5)   )    dimnames #> [1] \"PC_1\" \"PC_2\" \"PC_3\" \"PC_4\" \"PC_5\"  fetch_data(   AML_Seurat,   vars = dimnames   ) |> str() #> 'data.frame':\t250 obs. of  5 variables: #>  $ PC_1: num  3.91 3.67 2.97 2.88 42.94 ... #>  $ PC_2: num  1.676 -0.157 0.716 1.103 -11.258 ... #>  $ PC_3: num  1.86 3.03 2.6 3.68 -4 ... #>  $ PC_4: num  1.308 0.649 -0.415 0.734 25.255 ... #>  $ PC_5: num  -1.09 -2.1 -1.68 -1.16 8.28 ..."},{"path":"https://amc-heme.github.io/SCUBA/reference/relabel_axis.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-label axis behavior — relabel_axis","title":"Re-label axis behavior — relabel_axis","text":"Code relabel axis expr_plot function. default axis text \"Feature Expression\", changes removed based type data plotted. data reduction, label changes \"Embeddings Value\". data comes source assay reduction, label removed. label changed (x-axis y-axis) depends type plot created expr_plot (violin, dot, etc.).","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/relabel_axis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-label axis behavior — relabel_axis","text":"","code":"relabel_axis(object, feature, ...)  # S3 method for class 'Seurat' relabel_axis(object, feature, ...)  # S3 method for class 'SingleCellExperiment' relabel_axis(object, feature, ...)  # S3 method for class 'AnnDataR6' relabel_axis(object, feature, ...)"},{"path":"https://amc-heme.github.io/SCUBA/reference/relabel_axis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-label axis behavior — relabel_axis","text":"object single-cell object. Currently, Seurat, SingleCellExperiment, Anndata objects supported. feature feature plotted. one feature passed generic . multi-feature plot, generic ran separately feature, changes labeling applied individual plot (patchwork object) iteratively. ... Currently unused.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/relabel_axis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Re-label axis behavior — relabel_axis","text":"Anndata objects, label always show \"Feature Expression\", unless feature plotted metadata variable, case label drawn. Labels can manually added plot creation ggplot2::labs() event different label appropriate feature plotted.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/relabel_axis.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Re-label axis behavior — relabel_axis","text":"relabel_axis(Seurat): Seurat objects relabel_axis(SingleCellExperiment): SingleCellExperiment objects relabel_axis(AnnDataR6): Anndata objects","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize values in a metadata variable — unique_values","title":"Summarize values in a metadata variable — unique_values","text":"Returns unique values metadata variable provided. unique_values utility function summarizing metadata object.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize values in a metadata variable — unique_values","text":"","code":"unique_values(object, var)"},{"path":"https://amc-heme.github.io/SCUBA/reference/unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize values in a metadata variable — unique_values","text":"object single cell object. Currently, Seurat, SingleCellExpleriment, anndata objects supported. var metadata variable return unique values.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize values in a metadata variable — unique_values","text":"character vector giving unique values specified metadata variable.","code":""},{"path":"https://amc-heme.github.io/SCUBA/reference/unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize values in a metadata variable — unique_values","text":"","code":"unique_values(AML_Seurat, var = \"Batch\") #> [1] \"BM_200AB\"   \"PBMC_200AB\"  unique_values(AML_Seurat, var = \"condensed_cell_type\") #>  [1] \"Plasma cells\"                 \"Primitive\"                    #>  [3] \"Dendritic cells\"              \"Plasmacytoid dendritic cells\" #>  [5] \"BM Monocytes\"                 \"NK Cells\"                     #>  [7] \"CD8+ T Cells\"                 \"B Cells\"                      #>  [9] \"CD4+ T Cells\"                 \"PBMC Monocytes\""}]
